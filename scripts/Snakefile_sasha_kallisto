# Varroa virus networks
# from scripts.split_fasta_regions import split_fasta
# from snakemake.utils import R

outDir = "data"   # symlink to /work
refDir = "ref" 	  # symlink to /work
SCRATCH  = "/work/scratch"

kallistoIndex = "ref/Vdes_viruses"
SINGLE = [line.rstrip() for line in open("ref/single.txt")]
PAIRED = [line.rstrip() for line in open("ref/paired.txt")]

localrules: all
	
rule all:
	input: expand(outDir + "/kallisto/{sample}/abundance.tsv", sample = SINGLE )

rule downloadSRAsingle:
	output: outDir + "/reads/{sample}.fastq.gz"
	resources: mem=1, time=60*24
	wildcard_constraints: sample = '[A-Z0-9]+'
	threads: 4
	params: outdir = outDir + "/reads/"
	#conda: "envs/base.yaml"
	shell: "module load sratoolkit/2.8.0; parallel-fastq-dump --threads {threads} --tmpdir {SCRATCH} --outdir {params.outdir} --gzip --sra-id {wildcards.sample}"

rule downloadSRApaired:
	output: outDir + "/reads/{sample}_1.fastq.gz", outDir + "/reads/{sample}_2.fastq.gz"
	resources: mem=1, time=60*24
	wildcard_constraints: sample = '[A-Z0-9]+'
	threads: 4
	params: outdir = outDir + "/reads/"
	#conda: "envs/base.yaml"
	shell: "module load sratoolkit/2.8.0; parallel-fastq-dump --tmpdir {SCRATCH} --threads {threads} --outdir {params.outdir} --gzip --split-files --sra-id {wildcards.sample}"

rule trimSingle:
	input: outDir + "/reads/{sample}.fastq.gz"
	output: outDir + "/trimmed_reads/{sample}.fastq.gz"
	resources: mem=5, time=60
	wildcard_constraints: sample = '[A-Z0-9]+'
	#conda: "envs/base.yaml"
	threads: 1
	shell: "AdapterRemoval --trimwindows 5 --minquality 20 --file1 {input} --output1 {output} --basename {outDir}/trimmed_reads/{wildcards.sample} --gzip --threads {threads}"


rule kallistoSingle:
	input: rules.trimSingle.output
	output: 
		h5 = outDir + "/kallisto/{sample}/abundance.h5",
		tsv = outDir + "/kallisto/{sample}/abundance.tsv",
		json = outDir + "/kallisto/{sample}/run_info.json",
		log = outDir + "/kallisto/{sample}.log"
	wildcard_constraints: sample = '[A-Z0-9]+'
	params: outdir = lambda wildcards: outDir + "/kallisto/" + wildcards.sample
	#conda: "envs/base.yaml"
	resources: mem=2, time=60
	threads: 1
	shell: "kallisto quant -b 100 -s 200 -l 350  -t {threads} --single -o {params.outdir} -i {kallistoIndex} {input} 2> {output.log}"

rule trimPaired:
	input: outDir + "/reads/{sample}_1.fastq.gz", outDir + "/reads/{sample}_2.fastq.gz"
	output: outDir + "/trimmed_reads/{sample}_1.fastq.gz", outDir + "/trimmed_reads/{sample}_2.fastq.gz"
	resources: mem=5, time=60*3
	wildcard_constraints: sample = '[A-Z0-9]+'
	#conda: "envs/base.yaml"
	threads: 4
	shell: "AdapterRemoval --trimwindows 5 --minquality 20 --file1 {input[0]} --output1 {output[0]} --file2 {input[1]} --output2 {output[1]} --basename {outDir}/trimmed_reads/{wildcards.sample} --gzip --threads {threads}"

rule collectTrimmed:
	input: expand(outDir + "/trimmed_reads/{sample}.fastq.gz", sample = SINGLE), expand(outDir + "/trimmed_reads/{sample}_{read}.fastq.gz", sample=PAIRED, read = (1,2))

rule kallistoPaired:
	input: rules.trimPaired.output
	output: 
		h5 = outDir + "/kallistoP/{sample}/abundance.h5",
		tsv = outDir + "/kallistoP/{sample}/abundance.tsv",
		json = outDir + "/kallistoP/{sample}/run_info.json",
		log = outDir + "/kallistoP/{sample}.log"
	wildcard_constraints: sample = '[A-Z0-9]+'
	params: outdir = lambda wildcards: outDir + "/kallistoP/" + wildcards.sample
	#conda: "envs/base.yaml"
	resources: mem=2, time=180
	threads: 4
	shell: "kallisto quant -b 100 -t {threads} -o {params.outdir} -i {kallistoIndex} {input} 2> {output.log}"

rule collectKallistoPaired:
	input: expand(outDir + "/kallistoP/{sample}/abundance.h5", sample = PAIRED)

rule collectKallistoSingle:
	input: expand(outDir + "/kallisto/{sampleSingle}/abundance.h5", sampleSingle = SINGLE)


rule trimBad:
	input: outDir + "/reads/{sample}_{read}.fastq.gz"
	output: outDir + "/reads/{sample}_{read}.fq.gz"
	resources: mem=5, time=60
	wildcard_constraints: sample = '[A-Z0-9]+'
	shell: "zcat {input} | head -80000000 |gzip -1 > {output} || true"

rule collectBad:
	input: expand(outDir + "/reads/{sample}_{read}.fq.gz", sample = ("SRR3632582", "SRR3634700"), read = (1,2))
