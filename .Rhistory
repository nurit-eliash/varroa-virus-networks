mar = mar,
type = type, order = order,
tl.col = "black",
diag = diag,
sig.level = sig.level
)
}
# plot the correlogram
virusAbundCor_66 <- corrplot2(
data = viruses_load_17,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "lower",
tl.srt = 75)
corrplot(mat,
method = "color", col = col(200),
mar = mar,
type = type, order = order,
tl.col = "black",
diag = diag,
p.mat = p.mat, sig.level = sig.level, insig = "blank")
# make a function to correlate viruses load
corrplot2 <- function(data,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 75,
number.font = 1,
number.cex = 0.5,
mar = c(0, 0, 0, 0)) {
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#053061","#2166ac","#4393c3","#92c5de","#d1e5f0","#f7f7f7","#fddbc7","#f4a582","#d6604d","#b2182b","#67001f"))
corrplot(mat,
method = "color", col = col(200),
mar = mar,
type = type, order = order,
tl.col = "black",
diag = diag,
p.mat = p.mat, sig.level = sig.level, insig = "blank")
}
# plot the correlogram
virusAbundCor_66 <- corrplot2(
data = viruses_load_17,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "lower",
tl.srt = 75)
data_incomplete <- data
# make a function to correlate viruses load
corrplot2 <- function(data,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 75,
number.font = 1,
number.cex = 0.5,
mar = c(0, 0, 0, 0)) {
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#053061","#2166ac","#4393c3","#92c5de","#d1e5f0","#f7f7f7","#fddbc7","#f4a582","#d6604d","#b2182b","#67001f"))
corrplot(mat,
method = "color", col = col(200),
mar = mar,
type = type, order = order,
tl.col = "black",
diag = diag,
p.mat = p.mat, sig.level = sig.level)
}
# plot the correlogram
virusAbundCor_66 <- corrplot2(
data = viruses_load_17,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "lower",
tl.srt = 75)
# for the paper figure 2a
# make a function to correlate viruses load
corrplot2 <- function(data,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 75,
number.font = 1,
number.cex = 0.5,
mar = c(0, 0, 0, 0)) {
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#053061","#2166ac","#4393c3","#92c5de","#d1e5f0","#f7f7f7","#fddbc7","#f4a582","#d6604d","#b2182b","#67001f"))
corrplot(mat,
method = "color", col = col(200),
mar = mar,
type = type, order = order,
tl.col = "white", #  to hide the viruses names, as in the plot for the MS.
# hide correlation coefficients on the diagonal
p.mat = p.mat,  # only to know which of the correlations was significant
diag = diag
)
}
corrplot2(
data = viruses_load_17,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = TRUE, # add a diagonal so it will fit the other matrix fig2b, in figure 2
type = "lower" # arrange in "lower" instead of "upper" type
)
# make a function to correlate viruses load
corrplot2 <- function(data,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 75,
number.font = 1,
number.cex = 0.5,
mar = c(0, 0, 0, 0)) {
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#053061","#2166ac","#4393c3","#92c5de","#d1e5f0","#f7f7f7","#fddbc7","#f4a582","#d6604d","#b2182b","#67001f"))
corrplot(mat,
method = "color", col = col(200),
mar = mar,
type = type, order = order,
tl.col = "black",
diag = diag,
p.mat = p.mat,  # only to know which of the correlations was significant
sig.level = sig.level)
}
# plot the correlogram
virusAbundCor_66 <- corrplot2(
data = viruses_load_17,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "lower",
tl.srt = 75)
# and the viral abundance correlogram:
#virusAbundCor_66 <- readRDS(file = "/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/virusAbundCor_66.rds")
virusAbundCor_66 <- virusAbundCor_66$corr
# make correlation matrix of the "moduleTraitCor":
corModulTrait_66 <- cor(moduleTraitCor_66)
# (1) Mantel test using "ape" library:
mantel.test(corModulTrait_66, virusAbundCor_66, graph = TRUE,
main = "Mantel test",
xlab = "z-statistic", ylab = "Density",
sub = "The vertical line shows the observed z-statistic")
# (2) Mantel test using "vegan" library:
mantel(corModulTrait_66, virusAbundCor_66, method="pearson", permutations=1000)
#plot the correlation
#sizeGrWindow(9, 5)
verboseScatterplot(x = corModulTrait_66, y = virusAbundCor_66, main = "Correlation between Fig 2a, \n virus-virus interaction; and Fig 2b, \n varroa-virus interaction", xlab = "Correlation of viral interaction \nwith varroa modules", ylab = "Correlation of viral abundance", abline = T, abline.color = "black", bg = "black", cex.lab = 1.2, cex.main = 1, cex.axis = 1)
# load the gene ID of the varroa RNAi-genes (based on Nganso et al. 2020)
RNAi_genes <- read_csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/data/varroa_RNAi.csv")
RNAi_genes$gene <- as.character(RNAi_genes$gene)
RNAi_genes
# make a dataframe with all genes and their info: module assignment, virus interaction, modules membership and Intramodule connectivity:
geneInfo <- data.frame(
module = moduleColors,
geneTraitSignificance_66,
GSPadjust_66,
geneModuleMembership_66,
IntraModCon = Alldegrees1_66$kWithin) %>%
rownames_to_column("gene")
# join the varroa RNAi-genes and the all "geneInfo" table
RNAi <- inner_join(RNAi_genes, geneInfo, by = "gene")
#plot the gene distribution according to module
ggplot(RNAi, aes(module, fill = family)) + geom_bar() +
ggtitle("RNAi gene distribution to modules")
#save the RNAi varroa genes and their module as csv
write_csv(RNAi, "/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/varroa_RNAi_modules.csv")
RNAi
View(RNAi)
# Before PCA, we transpose the table "final_gene_tpm_71", and transform (log10+0.000001)
final_gene_tpm_71_T<- transposeBigData(log10(final_gene_tpm_71 + 0.000001))
PCA_71 <- prcomp(final_gene_tpm_71_T)
p71 <- autoplot(PCA_71, label = TRUE, x = 1, y = 2)+
ggtitle("a. PCA of 71 libraries based on gene expression")
# Five libraries are obvious outliers: "SRR5109825", "SRR5109827", "SRR533974" , "SRR3927496", "SRR8867385".
final_gene_tpm_66_T <- final_gene_tpm_71_T %>%
rownames_to_column("library") %>%
dplyr::filter(!(library %in% c("SRR5109825", "SRR5109827", "SRR533974" , "SRR3927496", "SRR8867385"))) %>% column_to_rownames("library")
PCA_66 <- prcomp(final_gene_tpm_66_T)
p66 <- autoplot(PCA_66, label = TRUE, x = 1, y = 2)+
ggtitle("b. PCA of 66 libraries based on gene expression")
# plot the two PCA plots side by side:
par(mar = c(4, 4, .1, .1))
p71
p66
p71
# load the annotation table of Varroa destructor
annot.vd <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/data/VdesGOready2.csv")
#Preparing the GO frame
annot.vd2 <- annot.vd %>%
mutate(evidence = "IEA") %>%
dplyr::select(go_id = GO.ids, evidence, gene = Gene.id)
goFrame.vd <-GOFrame(annot.vd2, organism = "Vd")
goAllFrame.vd <-GOAllFrame(goFrame.vd)
gsc.vd <-GeneSetCollection(goAllFrame.vd, setType = GOCollection())
#Preparing the universe
universe.vd <- as.character(unique(annot.vd2$gene)) # there's a wired thing in the GSEAGOHyperGParams function, sometimes its required the universe to be "character".
# Preparing the gene set (list of genes in a module)
# change "black" to the name of the desired module, in the first line: [moduleColors=="black"], and in the final "write.csv(file = "GO_term_enrichment_**salmon**BP.csv")
ME <- names(for_modules)[moduleColors=="turquise"]
ME
# Preparing the gene set (list of genes in a module)
# change "black" to the name of the desired module, in the first line: [moduleColors=="black"], and in the final "write.csv(file = "GO_term_enrichment_**salmon**BP.csv")
ME <- names(for_modules)[moduleColors=="turquoise"]
ME
ME_df <- data.frame(gene = ME)
genes.vd <- unique(ME_df$gene)
head(genes.vd)
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
over.vd <- hyperGTest(params.vd)
GO_enrich.vd <- as.data.frame(summary(over.vd)) %>%
arrange(Pvalue)
write.csv(GO_enrich.vd, file = "/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_term_turquoise.csv")
GO_enrich.vd
# Preparing the gene set (list of genes in a module)
# change "black" to the name of the desired module, in the first line: [moduleColors=="black"], and in the final "write.csv(file = "GO_term_enrichment_**salmon**BP.csv")
ME <- names(for_modules)[moduleColors=="blue"]
ME_df <- data.frame(gene = ME)
genes.vd <- unique(ME_df$gene)
head(genes.vd)
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
over.vd <- hyperGTest(params.vd)
GO_enrich.vd <- as.data.frame(summary(over.vd)) %>%
arrange(Pvalue)
write.csv(GO_enrich.vd, file = "/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_terms_modules/GO_term_blue.csv")
# Preparing the gene set (list of genes in a module)
# change "black" to the name of the desired module, in the first line: [moduleColors=="black"], and in the final "write.csv(file = "GO_term_enrichment_**black**BP.csv")
ME <- names(for_modules)[moduleColors=="brown"]
ME_df <- data.frame(gene = ME)
genes.vd <- unique(ME_df$gene)
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
over.vd <- hyperGTest(params.vd)
GO_enrich.vd <- as.data.frame(summary(over.vd)) %>%
arrange(Pvalue)
write.csv(GO_enrich.vd, file = "/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_terms_modules/GO_term_brown.csv")
# Preparing the gene set (list of genes in a module)
# change "black" to the name of the desired module, in the first line: [moduleColors=="black"], and in the final "write.csv(file = "GO_term_enrichment_**black**BP.csv")
ME <- names(for_modules)[moduleColors=="yellow"]
ME_df <- data.frame(gene = ME)
genes.vd <- unique(ME_df$gene)
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
over.vd <- hyperGTest(params.vd)
GO_enrich.vd <- as.data.frame(summary(over.vd)) %>%
arrange(Pvalue)
write.csv(GO_enrich.vd, file = "/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_terms_modules/GO_term_yellow.csv")
# Preparing the gene set (list of genes in a module)
# change "black" to the name of the desired module, in the first line: [moduleColors=="black"], and in the final "write.csv(file = "GO_term_enrichment_**black**BP.csv")
ME <- names(for_modules)[moduleColors=="red"]
ME_df <- data.frame(gene = ME)
genes.vd <- unique(ME_df$gene)
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
over.vd <- hyperGTest(params.vd)
GO_enrich.vd <- as.data.frame(summary(over.vd)) %>%
arrange(Pvalue)
write.csv(GO_enrich.vd, file = "/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_terms_modules/GO_term_red.csv")
# Preparing the gene set (list of genes in a module)
# change "black" to the name of the desired module, in the first line: [moduleColors=="black"], and in the final "write.csv(file = "GO_term_enrichment_**black**BP.csv")
ME <- names(for_modules)[moduleColors=="black"]
ME_df <- data.frame(gene = ME)
genes.vd <- unique(ME_df$gene)
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
over.vd <- hyperGTest(params.vd)
GO_enrich.vd <- as.data.frame(summary(over.vd)) %>%
arrange(Pvalue)
write.csv(GO_enrich.vd, file = "/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_terms_modules/GO_term_black.csv")
# Preparing the gene set (list of genes in a module)
# change "black" to the name of the desired module, in the first line: [moduleColors=="black"], and in the final "write.csv(file = "GO_term_enrichment_**black**BP.csv")
ME <- names(for_modules)[moduleColors=="magenta"]
ME
ME_df <- data.frame(gene = ME)
genes.vd <- unique(ME_df$gene)
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
over.vd <- hyperGTest(params.vd)
GO_enrich.vd <- as.data.frame(summary(over.vd)) %>%
arrange(Pvalue)
write.csv(GO_enrich.vd, file = "/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_terms_modules/GO_term_magenta.csv")
# Preparing the gene set (list of genes in a module)
# change "black" to the name of the desired module, in the first line: [moduleColors=="black"], and in the final "write.csv(file = "GO_term_enrichment_**black**BP.csv")
ME <- names(for_modules)[moduleColors=="tan"]
ME_df <- data.frame(gene = ME)
genes.vd <- unique(ME_df$gene)
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
over.vd <- hyperGTest(params.vd)
GO_enrich.vd <- as.data.frame(summary(over.vd)) %>%
arrange(Pvalue)
write.csv(GO_enrich.vd, file = "/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_terms_modules/GO_term_tan.csv")
# (3) heat-map of viruses loads (log10(tpm)) per library
# load the former virus data
#load(file = "/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/viruses_load.rds")
# plot the viruses abundance in each library
# make a vector of the new viruses order
new_order <- c("DWVa", "DWVb", "VDV2", "BMV","VOV_1","ARV-1", "ARV-2", "DWVc", "AmFV", "VDV3", "VDV5","ABPV", "VTLV", "SBV", "BQCV","VDV4", "IAPV", "KBV", "SBPV", "LSBV","CBPV" ,"AFV", "ANV", "VPVL_46","VPVL_36")
# re-order the viruses, based on viral load and viral abundance (from highest, on the left, to lowest on the right), and change the names of the viruses to match their common name in the literature:
viruses_load_arranged <- viruses_load  %>%
mutate(description =  factor(description, levels = new_order)) %>%
arrange(description) %>%
mutate(across("description", str_replace, "VOV_1", "VOV-1"))
# lock in factor level order
viruses_load_arranged$description <- factor(viruses_load_arranged$description, levels = viruses_load_arranged$description)
# spread the df
virus_abund <- viruses_load_arranged %>%
gather("library", "tpm", -description)
virus_abund[, 3] <- (virus_abund[,3]+ 0.000001) # I added 0.000001 to each value, so there will be no zeros
virus_abund[, 3] <- log10(virus_abund[,3]) # tpm in log10 scale
virus_abund <- replace_with_na(virus_abund, replace = list(tpm = -6)) # whenever there is a zero value (-6), I replace with NA, so the cell will appear in gray color.
# now make a heat map
ggplot(data = virus_abund, mapping = aes(x = description,
y = library,
fill = tpm)) +
scale_fill_gradient2(low="#FFFFCC", mid = "#FF9933", high="#990000",  na.value = "grey92") +
geom_tile() +
theme_linedraw() +
xlab(label = "Viruses") +
ylab(label = "Varroa SRA libraries") +
labs(fill = "Viral load \n log10(TPM)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 15)) +
theme(axis.text.y = element_text(size = 12)) +
theme(axis.ticks = element_blank()) +
theme(axis.title = element_text(size = 20))
viruses_load
viruses_load %>% mutate(count=rowSums(.!=0))
View(viruses_load)
viruses_load %>% mutate(count=rowSums(.!=0)) %>% view()
viruses_load %>% mutate(count=rowSums(.!=0)) %>%
dplyr::select(c("description", "count"))   %>% view()
viruses_load %>% mutate(count=rowSums(.!=0)) %>%
dplyr::select(c("description", "count")) %>%  arrange(count) %>% view()
arrange
order <- viruses_load %>% mutate(count=rowSums(.!=0)) %>%
dplyr::select(c("description", "count")) %>%  arrange(count) %>% select("description") %>% as_vector() view()
order <- viruses_load %>% mutate(count=rowSums(.!=0)) %>%
dplyr::select(c("description", "count")) %>%  arrange(count) %>% select("description") %>% as_vector()
order <- viruses_load %>% mutate(count=rowSums(.!=0)) %>%
dplyr::select(c("description", "count")) %>%  arrange(count) %>% dplyr::select("description") %>% as_vector()
order
order <- viruses_load %>% mutate(count=rowSums(.!=0)) %>%
dplyr::select(c("description", "count")) %>%  arrange(count)
viruses_load %>% mutate(count=rowSums(.!=0)) %>%
dplyr::select(c("description", "count")) %>%  arrange(count) %>% [1,]
order <- viruses_load %>% mutate(count=rowSums(.!=0)) %>%
dplyr::select(c("description", "count")) %>%  arrange(count) %>% pull(description)
order
order <- viruses_load %>% mutate(count=rowSums(.!=0)) %>%
dplyr::select(c("description", "count")) %>%  arrange(desc(count)) %>% pull(description)
order
# make a vector of the new viruses order, based on their abundance
new_order <- c("VDV2","ARV-1","DWVa","DWVb","ARV-2","BMV","VDV5","DWVc","AmFV", "VOV_1", "VDV3","BQCV","ABPV","SBV","VTLV","VDV4","IAPV","KBV","SBPV","LSBV","CBPV","AFV","ANV","VPVL_46","VPVL_36")
# re-order the viruses, based on viral load and viral abundance (from highest, on the left, to lowest on the right), and change the names of the viruses to match their common name in the literature:
viruses_load_arranged <- viruses_load  %>%
mutate(description =  factor(description, levels = new_order)) %>%
arrange(description) %>%
mutate(across("description", str_replace, "VOV_1", "VOV-1"))
# lock in factor level order
viruses_load_arranged$description <- factor(viruses_load_arranged$description, levels = viruses_load_arranged$description)
# spread the df
virus_abund <- viruses_load_arranged %>%
gather("library", "tpm", -description)
virus_abund[, 3] <- (virus_abund[,3]+ 0.000001) # I added 0.000001 to each value, so there will be no zeros
virus_abund[, 3] <- log10(virus_abund[,3]) # tpm in log10 scale
virus_abund <- replace_with_na(virus_abund, replace = list(tpm = -6)) # whenever there is a zero value (-6), I replace with NA, so the cell will appear in gray color.
# now make a heat map
ggplot(data = virus_abund, mapping = aes(x = description,
y = library,
fill = tpm)) +
scale_fill_gradient2(low="#FFFFCC", mid = "#FF9933", high="#990000",  na.value = "grey92") +
geom_tile() +
theme_linedraw() +
xlab(label = "Viruses") +
ylab(label = "Varroa SRA libraries") +
labs(fill = "Viral load \n log10(TPM)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 15)) +
theme(axis.text.y = element_text(size = 12)) +
theme(axis.ticks = element_blank()) +
theme(axis.title = element_text(size = 20))
