par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_66,
xLabels = names(b_viruses_load),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colos = hcl.colors(n = 50, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-1,1),
main = paste("Varroa Module-viruses relationships"))
#colors = blueWhiteRed(50),
#colors = hcl.colors(n = 80, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE),
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor_66, 2), "\n(",
signif(moduleTraitPadjust_66, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor_66)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_66,
xLabels = names(b_viruses_load),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = hcl.colors(n = 50, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-1,1),
main = paste("Varroa Module-viruses relationships"))
#colors = blueWhiteRed(50),
#colors = hcl.colors(n = 80, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE),
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor_66, 2), "\n(",
signif(moduleTraitPadjust_66, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor_66)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_66,
xLabels = names(b_viruses_load),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = hcl.colors(n = 50, palette = "blues", alpha = NULL, rev = FALSE, fixup = TRUE),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-1,1),
main = paste("Varroa Module-viruses relationships"))
#colors = blueWhiteRed(50),
#colors = hcl.colors(n = 80, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE),
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor_66, 2), "\n(",
signif(moduleTraitPadjust_66, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor_66)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_66,
xLabels = names(b_viruses_load),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = hcl.colors(n = 50, palette = "BuPu", alpha = NULL, rev = FALSE, fixup = TRUE),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-1,1),
main = paste("Varroa Module-viruses relationships"))
#colors = blueWhiteRed(50),
#colors = hcl.colors(n = 80, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE),
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor_66, 2), "\n(",
signif(moduleTraitPadjust_66, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor_66)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_66,
xLabels = names(b_viruses_load),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = hcl.colors(n = 50, palette = "Greens", alpha = NULL, rev = FALSE, fixup = TRUE),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-1,1),
main = paste("Varroa Module-viruses relationships"))
#colors = blueWhiteRed(50),
#colors = hcl.colors(n = 80, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE),
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor_66, 2), "\n(",
signif(moduleTraitPadjust_66, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor_66)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_66,
xLabels = names(b_viruses_load),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = hcl.colors(n = 50, palette = "YIGnBu", alpha = NULL, rev = FALSE, fixup = TRUE),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-1,1),
main = paste("Varroa Module-viruses relationships"))
#colors = blueWhiteRed(50),
#colors = hcl.colors(n = 80, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE),
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor_66, 2), "\n(",
signif(moduleTraitPadjust_66, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor_66)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_66,
xLabels = names(b_viruses_load),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = hcl.colors(n = 50, palette = "YlGnBu", alpha = NULL, rev = FALSE, fixup = TRUE),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-1,1),
main = paste("Varroa Module-viruses relationships"))
#colors = blueWhiteRed(50),
#colors = hcl.colors(n = 80, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE),
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor_66, 2), "\n(",
signif(moduleTraitPadjust_66, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor_66)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_66,
xLabels = names(b_viruses_load),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = hcl.colors(n = 50, palette = "PRGn", alpha = NULL, rev = FALSE, fixup = TRUE),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-1,1),
main = paste("Varroa Module-viruses relationships"))
#colors = blueWhiteRed(50),
#colors = hcl.colors(n = 80, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE),
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor_66, 2), "\n(",
signif(moduleTraitPadjust_66, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor_66)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_66,
xLabels = names(b_viruses_load),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = hcl.colors(n = 50, palette = "Spectral", alpha = NULL, rev = FALSE, fixup = TRUE),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-1,1),
main = paste("Varroa Module-viruses relationships"))
#colors = blueWhiteRed(50),
#colors = hcl.colors(n = 80, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE),
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor_66, 2), "\n(",
signif(moduleTraitPadjust_66, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor_66)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_66,
xLabels = names(b_viruses_load),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = hcl.colors(n = 50, palette = "BrBg", alpha = NULL, rev = FALSE, fixup = TRUE),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-1,1),
main = paste("Varroa Module-viruses relationships"))
#colors = blueWhiteRed(50),
#colors = hcl.colors(n = 80, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE),
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor_66, 2), "\n(",
signif(moduleTraitPadjust_66, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor_66)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_66,
xLabels = names(b_viruses_load),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = hcl.colors(n = 50, palette = "RdYlBu", alpha = NULL, rev = FALSE, fixup = TRUE),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-1,1),
main = paste("Varroa Module-viruses relationships"))
#colors = blueWhiteRed(50),
#colors = hcl.colors(n = 80, palette = "viridis", alpha = NULL, rev = FALSE, fixup = TRUE),
# plot the viruses abundance in each library
# prepare the 'viruses_load' table, with 17 viruses,
# excluding viruses with 'zero tpm': "CBPV", "AFV", "ANV" , "VPVL_46", "VPVL_36", "SBPV", also excluding viruses with low abundance :"KBV", "LSV".  left with 15 viruses
a_viruses_load_66 <- viruses_load %>%
filter(description %in% c("DWVa", "DWVc", "IAPV",  "ABPV", "BQCV","SV", "VDV1/DWVb", "VDV2", "VDV3", "BMV", "ARV_2", "AmFV","VTLV","VDV4","VOV_1")) %>%
column_to_rownames("description") %>%
transposeBigData() %>%
rownames_to_column("library") %>%
#identify and remove the row numbers of the outlierd libraries (found by PCA)
#filter(!(library %in% c("SRR5109825", "SRR5109827", "SRR533974" , "SRR3927496", "SRR8867385"))) %>%
column_to_rownames("library")
# correlate viruses load (66 libs)
corrplot2 <- function(data,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 90,
number.font = 1,
number.cex = 0.5,
mar = c(0, 0, 0, 0)) {
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(mat,
method = "color", col = col(200), number.font = number.font,
mar = mar, number.cex = number.cex,
type = type, order = order,
addCoef.col = "black", # add correlation coefficient
tl.col = "black", tl.srt = tl.srt, # rotation of text labels
# combine with significance level
p.mat = p.mat, sig.level = sig.level, insig = "blank",
# hide correlation coefficients on the diagonal
diag = diag
)
}
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 75
)
# save the matrice for future analysis (Mantel)
save(virusAbundCor_66, file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/virusAbundCor_66.RData")
col
# plot the viruses abundance in each library
# prepare the 'viruses_load' table, with 17 viruses,
# excluding viruses with 'zero tpm': "CBPV", "AFV", "ANV" , "VPVL_46", "VPVL_36", "SBPV", also excluding viruses with low abundance :"KBV", "LSV".  left with 15 viruses
a_viruses_load_66 <- viruses_load %>%
filter(description %in% c("DWVa", "DWVc", "IAPV",  "ABPV", "BQCV","SV", "VDV1/DWVb", "VDV2", "VDV3", "BMV", "ARV_2", "AmFV","VTLV","VDV4","VOV_1")) %>%
column_to_rownames("description") %>%
transposeBigData() %>%
rownames_to_column("library") %>%
#identify and remove the row numbers of the outlierd libraries (found by PCA)
#filter(!(library %in% c("SRR5109825", "SRR5109827", "SRR533974" , "SRR3927496", "SRR8867385"))) %>%
column_to_rownames("library")
# correlate viruses load (66 libs)
corrplot2 <- function(data,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 90,
number.font = 1,
number.cex = 0.5,
mar = c(0, 0, 0, 0)) {
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- hcl.colors(n = 50, palette = "RdYlBu", alpha = NULL, rev = FALSE, fixup = TRUE)
corrplot(mat,
method = "color", col = col(200), number.font = number.font,
mar = mar, number.cex = number.cex,
type = type, order = order,
addCoef.col = "black", # add correlation coefficient
tl.col = "black", tl.srt = tl.srt, # rotation of text labels
# combine with significance level
p.mat = p.mat, sig.level = sig.level, insig = "blank",
# hide correlation coefficients on the diagonal
diag = diag
)
}
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 75
)
# hcl.colors(n = 50, palette = "RdYlBu", alpha = NULL, rev = FALSE, fixup = TRUE)
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
# save the matrice for future analysis (Mantel)
save(virusAbundCor_66, file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/virusAbundCor_66.RData")
# correlate viruses load (66 libs)
corrplot2 <- function(data,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 90,
number.font = 1,
number.cex = 0.5,
mar = c(0, 0, 0, 0)) {
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- hcl.colors(n = 50, palette = "RdYlBu", alpha = NULL, rev = FALSE, fixup = TRUE)
corrplot(mat,
method = "color", col = col(200), number.font = number.font,
mar = mar, number.cex = number.cex,
type = type, order = order,
addCoef.col = "black", # add correlation coefficient
tl.col = "black", tl.srt = tl.srt, # rotation of text labels
# combine with significance level
p.mat = p.mat, sig.level = sig.level, insig = "blank",
# hide correlation coefficients on the diagonal
diag = diag
)
}
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 75
)
# correlate viruses load (66 libs)
corrplot2 <- function(data,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 90,
number.font = 1,
number.cex = 0.5,
mar = c(0, 0, 0, 0)) {
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#FFFFCC", "#FF9933","#990000"))
corrplot(mat,
method = "color", col = col(200), number.font = number.font,
mar = mar, number.cex = number.cex,
type = type, order = order,
addCoef.col = "black", # add correlation coefficient
tl.col = "black", tl.srt = tl.srt, # rotation of text labels
# combine with significance level
p.mat = p.mat, sig.level = sig.level, insig = "blank",
# hide correlation coefficients on the diagonal
diag = diag
)
}
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 75
)
#import the varroa transcripts ("target_id") and their corresponding gene ("gene_id"). and add a col names.
varroa_isoforms <- read_tsv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/data/gene2isoform.txt.gz", col_names = c("gene_id", "target_id"))
#import the SRR libraries with tpms
df <- read_rds("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/data/kallisto.rds")
#join the varroa trascnripts(varroa_isoforms), and the library tpm (df), by the varroa genes ("traget_id")
gene_tpm <-  left_join(varroa_isoforms, df, by = "target_id")
#collapse isoforms to a single row of a gene, and sum the tpm(s) per gene per library
gene_tpm_collps <- gene_tpm %>% gather("library","tpm", -target_id, -gene_id) %>%
group_by(gene_id, library) %>% summarise(gene_tpm = sum(tpm))
# spread the table again, by library
final_gene_tpm <- spread(gene_tpm_collps, key = "library", value = "gene_tpm") %>% column_to_rownames('gene_id')
save(final_gene_tpm, file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/gene_tpm.RData")
#transpose final_gene_tpm, and transform (log10+0.000001)
final_gene_tpm_T<- transposeBigData(log10(final_gene_tpm + 0.000001))
#plot PCA, detect outlier libraries
autoplot(prcomp(final_gene_tpm_T), label = TRUE)+
ggtitle("66 libraries")
#remove outlier libraries (by col)
for_modules <- final_gene_tpm %>% transposeBigData()
#%>% dplyr::select(-c("SRR5109825", "SRR5109827", "SRR533974" , "SRR3927496", "SRR8867385"))
saveRDS(for_modules, file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/for_modules.rds")
#OPTIONAL
#remove outlier libraries + significant interacting libraries (17), from the "module-covariate-reg" analysis
#sig_lib_17 <- c("SRR6823684", "SRR6824277", "SRR5760848","SRR5760838", "SRR5760828", "SRR5760818","SRR5377265", "SRR7339931","SRR5377270", "SRR5377269", "SRR5377268","SRR5377267",  "SRR5377266", "SRR5377265","SRR5377264","SRR5377263","SRR8864012")
#for_modules_49 <- final_gene_tpm %>% dplyr::select(-c("SRR5109825", "SRR5109827", "SRR533974" , "SRR3927496", "SRR8867385", "SRR6823684", "SRR6824277", "SRR5760848","SRR5760838", "SRR5760828", "SRR5760818","SRR5377265", "SRR7339931","SRR5377270", "SRR5377269", "SRR5377268","SRR5377267",  "SRR5377266", "SRR5377265","SRR5377264","SRR5377263","SRR8864012")) %>%transposeBigData()
#plot PCA - the reduced file
#autoplot(prcomp(transposeBigData(log10(for_modules + 0.000001))), label = TRUE)
#=====================================================================================
#
#  Code chunk 1
#
#=====================================================================================
# If necessary, change the path below to the directory where the data files are stored.
setwd("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks")
# Display the current working directory
getwd()
# Allow multi-threading within WGCNA. This helps speed up certain calculations.
options(stringsAsFactors = FALSE)
#=====================================================================================
#
#  Code chunk 2
#
#=====================================================================================
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to=25, by=2))
# Call the network topology analysis function
sft = pickSoftThreshold(for_modules, powerVector = powers, verbose = 5)
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.80,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
