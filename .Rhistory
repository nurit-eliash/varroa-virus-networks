conditional = F,
testDirection = "over")
over.vd <- hyperGTest(params.vd)
over.vd
summary(over.vd)
GO_enrich.vd <- as.data.frame(summary(over.vd))
GO_enrich.vd %>%
arrange(Pvalue) %>%
write.csv(file = "/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_term_cyan.csv")
# Preparing the gene set (list of genes in an interesting module)
# change "salmon" to the name of the desired module, in the first line: [moduleColors=="salmon"], and in the final "write.csv(file = "GO_term_enrichment_**salmon**BP.csv")
ME <- names(for_modules)[moduleColors=="black"]
ME_df <- data.frame(gene = ME)
genes.vd <- unique(ME_df$gene)
head(genes.vd)
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
# when im changing universeGeneIds = *NULL*, then i dont get the warning
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
over.vd <- hyperGTest(params.vd)
over.vd
summary(over.vd)
GO_enrich.vd <- as.data.frame(summary(over.vd))
GO_enrich.vd %>%
arrange(Pvalue) %>%
write.csv(file = "/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_term_black.csv")
#load the go term enrichment analysis done using package ‘Category’
GOME_13_0 <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_term_salmon.csv")
# keep only highly significant terms
GOME_13 <- GOME_13_0 %>%
filter(Pvalue < 0.0001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_13 <- ggplot(GOME_13, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 13") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_13
#load the go term enrichment analysis done using package ‘Category’
GOME_3_0 <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_term_brown.csv")
# keep only highly significant terms
GOME_3 <- GOME_3_0 %>%
filter(Pvalue < 0.00001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_3 <- ggplot(GOME_3, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 3") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_3
#load the go term enrichment analysis done using package ‘Category’
GOME_6_0 <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_term_red.csv")
# keep only highly significant terms
GOME_6 <- GOME_6_0 %>%
filter(Pvalue < 0.00001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_6 <- ggplot(GOME_6, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 6") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_6
#load the go term enrichment analysis done using package ‘Category’
GOME_6_0 <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_term_red.csv")
# keep only highly significant terms
GOME_6 <- GOME_6_0 %>%
filter(Pvalue < 0.00001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_6 <- ggplot(GOME_6, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 6") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_6
GOME_6
#load the go term enrichment analysis done using package ‘Category’
GOME_6_0 <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_term_red.csv")
GOME_6_0
# keep only highly significant terms
GOME_6 <- GOME_6_0 %>%
filter(Pvalue < 0.00001) %>%
mutate(logPv = log(Pvalue))
GOME_6
# keep only highly significant terms
GOME_6 <- GOME_6_0 %>%
filter(Pvalue < 0.0001) %>%
mutate(logPv = log(Pvalue))
GOME_6
# keep only highly significant terms
GOME_6 <- GOME_6_0 %>%
filter(Pvalue < 0.01) %>%
mutate(logPv = log(Pvalue))
GOME_6
# keep only highly significant terms
GOME_6 <- GOME_6_0 %>%
filter(Pvalue < 0.05) %>%
mutate(logPv = log(Pvalue))
GOME_6
#now plot it based on the count of each term and the pvalue:
GO_6 <- ggplot(GOME_6, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 6") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_6
# keep only highly significant terms
GOME_6 <- GOME_6_0 %>%
filter(Pvalue < 0.01) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_6 <- ggplot(GOME_6, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 6") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_6
#load the go term enrichment analysis done using package ‘Category’
GOME_9_0 <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_term_magenta.csv")
# keep only highly significant terms
GOME_9 <- GOME_9_0 %>%
filter(Pvalue < 0.00001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_9 <- ggplot(GOME_9, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 9") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_9
# keep only highly significant terms
GOME_9 <- GOME_9_0 %>%
filter(Pvalue < 0.000001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_9 <- ggplot(GOME_9, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 9") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_9
# keep only highly significant terms
GOME_9 <- GOME_9_0 %>%
filter(Pvalue < 0.0000001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_9 <- ggplot(GOME_9, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 9") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_9
# keep only highly significant terms
GOME_9 <- GOME_9_0 %>%
filter(Pvalue < 0.00000001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_9 <- ggplot(GOME_9, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 9") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_9
# keep only highly significant terms
GOME_9 <- GOME_9_0 %>%
filter(Pvalue < 0.000000001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_9 <- ggplot(GOME_9, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 9") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_9
# keep only highly significant terms
GOME_9 <- GOME_9_0 %>%
filter(Pvalue < 0.0000000001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_9 <- ggplot(GOME_9, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 9") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_9
#load the go term enrichment analysis done using package ‘Category’
GOME_1_0 <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_term_turquoise.csv")
GOME_1_0
# keep only highly significant terms
GOME_1 <- GOME_1_0 %>%
filter(Pvalue < 0.0000000001) %>%
mutate(logPv = log(Pvalue))
GOME_1
# keep only highly significant terms
GOME_1 <- GOME_1_0 %>%
filter(Pvalue < 0.00001) %>%
mutate(logPv = log(Pvalue))
GOME_1
# keep only highly significant terms
GOME_1 <- GOME_1_0 %>%
filter(Pvalue < 0.0001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_1 <- ggplot(GOME_1, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 9") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_1
# keep only highly significant terms
GOME_1 <- GOME_1_0 %>%
filter(Pvalue < 0.00001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_1 <- ggplot(GOME_1, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 9") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_1
#now plot it based on the count of each term and the pvalue:
GO_1 <- ggplot(GOME_1, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 1") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
#load the go term enrichment analysis done using package ‘Category’
GOME_5_0 <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_term_green.csv")
# keep only highly significant terms
GOME_5 <- GOME_5_0 %>%
filter(Pvalue < 0.00001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_5 <- ggplot(GOME_5, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 5") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_5
# keep only highly significant terms
GOME_5 <- GOME_5_0 %>%
filter(Pvalue < 0.0001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_5 <- ggplot(GOME_5, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 5") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_5
# keep only highly significant terms
GOME_5 <- GOME_5_0 %>%
filter(Pvalue < 0.001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_5 <- ggplot(GOME_5, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 5") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_5
#load the go term enrichment analysis done using package ‘Category’
GOME_10_0 <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_term_purple.csv")
# keep only highly significant terms
GOME_10 <- GOME_10_0 %>%
filter(Pvalue < 0.001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_10 <- ggplot(GOME_10, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 10") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_10
# keep only highly significant terms
GOME_10 <- GOME_10_0 %>%
filter(Pvalue < 0.00001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_10 <- ggplot(GOME_10, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 10") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_10
# keep only highly significant terms
GOME_10 <- GOME_10_0 %>%
filter(Pvalue < 0.0001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_10 <- ggplot(GOME_10, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 10") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_10
# keep only highly significant terms
GOME_10 <- GOME_10_0 %>%
filter(Pvalue < 0.00001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_10 <- ggplot(GOME_10, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 10") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_10
# keep only highly significant terms
GOME_10 <- GOME_10_0 %>%
filter(Pvalue < 0.000005) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_10 <- ggplot(GOME_10, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 10") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_10
# keep only highly significant terms
GOME_10 <- GOME_10_0 %>%
filter(Pvalue < 0.00005) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_10 <- ggplot(GOME_10, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 10") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_10
#load the go term enrichment analysis done using package ‘Category’
GOME_14_0 <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_term_cyan.csv")
# keep only highly significant terms
GOME_14 <- GOME_14_0 %>%
filter(Pvalue < 0.00005) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_14 <- ggplot(GOME_14, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 14") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_14
# keep only highly significant terms
GOME_14 <- GOME_14_0 %>%
filter(Pvalue < 0.0001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_14 <- ggplot(GOME_14, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 14") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_14
# keep only highly significant terms
GOME_14 <- GOME_14_0 %>%
filter(Pvalue < 0.001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_14 <- ggplot(GOME_14, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 14") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_14
#load the go term enrichment analysis done using package ‘Category’
GOME_7_0 <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_term_black.csv")
# keep only highly significant terms
GOME_7 <- GOME_7_0 %>%
filter(Pvalue < 0.001) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_7 <- ggplot(GOME_7, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 7") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_7
# modules positively interacting with ARV-2 and VOV_1 (module 3), and with VDV2 and VDV4 (modules 6, 9):
grid.arrange(arrangeGrob(GO_3, top = "positively interacting with ARV-2 and VOV_1"),
arrangeGrob(GO_6, GO_9, top = "positively interacting with VDV2 and VDV4"),
nrow = 2, ncol =2)
grid.arrange(GO_3, GO_6, GO_9,  nrow = 2, ncol =2)
# modules positively interacting with ARV-2 and VOV_1 (module 3), and with VDV2 and VDV4 (modules 6, 9):
grid.arrange(arrangeGrob(GO_3),
arrangeGrob(GO_6, GO_9),
nrow = 2, ncol =2)
# modules positively interacting with ARV-2 and VOV_1 (module 3), and with VDV2 and VDV4 (modules 6, 9):
grid.arrange(arrangeGrob(GO_3),
arrangeGrob(GO_6, GO_9),
nrow = 1, ncol =2)
# modules negatively interacting ONLY with DWVa:
grid.arrange(GO_1 ,GO_5, GO_10, nrow = 1)
