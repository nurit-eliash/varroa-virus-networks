diag = T,
type = "full",
tl.srt = 45
)
# prepare the 'viruses_load' table, with 15 viruses,
# excluding viruses with 'zero tpm': "CBPV", "AFV", "ANV" , "VPVL_46", "VPVL_36", "SBPV", also excluding viruses with low abundance :"KBV", "LSV".  left with 15 viruses
a_viruses_load_66 <- viruses_load %>%
filter(description %in% c("DWVa", "ARV_2","VOV_1", "BMV","AmFV","ABPV","VTLV","IAPV","SV","VDV1/DWVb","DWVc","BQCV","VDV3","VDV2","VDV4")) %>%
column_to_rownames("description") %>%
transposeBigData() %>%
rownames_to_column("library") %>%
#identify and remove the row numbers of the outlierd libraries (found by PCA)
#filter(!(library %in% c("SRR5109825", "SRR5109827", "SRR533974" , "SRR3927496", "SRR8867385"))) %>%
column_to_rownames("library")
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
order = "original",
diag = T,
type = "lower")
# prepare the 'viruses_load' table, with 15 viruses,
# excluding viruses with 'zero tpm': "CBPV", "AFV", "ANV" , "VPVL_46", "VPVL_36", "SBPV", also excluding viruses with low abundance :"KBV", "LSV".  left with 15 viruses
a_viruses_load_66 <- viruses_load %>%
filter(description %in% c("DWVa", "ARV_2","VOV_1", "BMV","AmFV","ABPV","VTLV","IAPV","SV","VDV1/DWVb","DWVc","BQCV","VDV3","VDV2","VDV4")) %>%
column_to_rownames("description") %>%
transposeBigData() %>%
rownames_to_column("library") %>%
#identify and remove the row numbers of the outlierd libraries (found by PCA)
#filter(!(library %in% c("SRR5109825", "SRR5109827", "SRR533974" , "SRR3927496", "SRR8867385"))) %>%
column_to_rownames("library")
viruses_load
viruses_load <- readRDS(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/viruses_load.RData")
# prepare the 'viruses_load' table, with 15 viruses,
# excluding viruses with 'zero tpm': "CBPV", "AFV", "ANV" , "VPVL_46", "VPVL_36", "SBPV", also excluding viruses with low abundance :"KBV", "LSV".  left with 15 viruses
a_viruses_load_66 <- viruses_load %>%
filter(description %in% c("DWVa", "ARV_2","VOV_1", "BMV","AmFV","ABPV","VTLV","IAPV","SV","VDV1/DWVb","DWVc","BQCV","VDV3","VDV2","VDV4")) %>%
column_to_rownames("description") %>%
transposeBigData() %>%
rownames_to_column("library") %>%
#identify and remove the row numbers of the outlierd libraries (found by PCA)
#filter(!(library %in% c("SRR5109825", "SRR5109827", "SRR533974" , "SRR3927496", "SRR8867385"))) %>%
column_to_rownames("library")
# correlate viruses load (66 libs)
corrplot2 <- function(data,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 90,
number.font = 1,
number.cex = 0.5,
mar = c(0, 0, 0, 0)) {
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#053061","#2166ac","#4393c3","#92c5de","#d1e5f0","#f7f7f7","#fddbc7","#f4a582","#d6604d","#b2182b","#67001f"))
corrplot(mat,
method = "color", col = col(200), number.font = number.font,
mar = mar, number.cex = number.cex,
type = type, order = order,
tl.col = "black", tl.srt = tl.srt, # rotation of text labels
# combine with significance level
p.mat = p.mat, sig.level = sig.level, insig = "blank",
# hide correlation coefficients on the diagonal
diag = diag
)
}
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = T,
type = "full",
tl.srt = 45
)
# correlogram without viruses names:
corrplot2 <- function(data,
method = "pearson",
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 90,
mar = c(0, 0, 0, 0)) {
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#053061","#2166ac","#4393c3","#92c5de","#d1e5f0","#f7f7f7","#fddbc7","#f4a582","#d6604d","#b2182b","#67001f"))
corrplot(mat,
method = "color", col = col(200),
mar = mar,
type = type, order = order,
tl.col = "white",
# hide correlation coefficients on the diagonal
diag = diag
)
}
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
order = "original",
diag = T,
type = "lower")
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
order = "original",
diag = T,
tl.srt = 75,
type = "lower")
# correlogram without viruses names:
corrplot2 <- function(data,
method = "pearson",
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 90,
mar = c(0, 0, 0, 0)) {
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#053061","#2166ac","#4393c3","#92c5de","#d1e5f0","#f7f7f7","#fddbc7","#f4a582","#d6604d","#b2182b","#67001f"))
corrplot(mat,
method = "color", col = col(200),
mar = mar,
type = type, order = order,
tl.col = "black",
# hide correlation coefficients on the diagonal
diag = diag
)
}
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
order = "original",
diag = T,
tl.srt = 75,
type = "lower")
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
order = "original",
diag = T,
tl.srt = 0,
type = "lower")
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
order = "original",
diag = T,
tl.srt = 0,
type = "lower")
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
order = "original",
diag = T,
tl.srt = 90,
type = "lower")
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
order = "original",
diag = T,
tl.srt = 90,
type = "lower")
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
order = "original",
diag = T,
tl.srt = 45,
type = "lower")
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
order = "original",
diag = T,
tl.srt = 45,
type = "upper")
# correlogram without viruses names:
corrplot2 <- function(data,
method = "pearson",
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 90,
mar = c(0, 0, 0, 0)) {
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#053061","#2166ac","#4393c3","#92c5de","#d1e5f0","#f7f7f7","#fddbc7","#f4a582","#d6604d","#b2182b","#67001f"))
corrplot(mat,
method = "color", col = col(200),
mar = mar,
type = type, order = order,
tl.col = "white",
# hide correlation coefficients on the diagonal
diag = diag
)
}
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
order = "original",
diag = T,
tl.srt = 45,
type = "upper")
# correlogram without viruses names:
corrplot2 <- function(data,
method = "pearson",
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 90,
mar = c(0, 0, 0, 0)) {
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#053061","#2166ac","#4393c3","#92c5de","#d1e5f0","#f7f7f7","#fddbc7","#f4a582","#d6604d","#b2182b","#67001f"))
corrplot(mat,
method = "color", col = col(200),
mar = mar,
type = type, order = order,
tl.col = "black",
# hide correlation coefficients on the diagonal
diag = diag
)
}
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
order = "original",
diag = T,
tl.srt = 45,
type = "upper")
ggpairs(dat, columns = c("DWVa","DWVc", "BQCV", "VDV3"),
lower = list(continuous = wrap("smooth", size=1.5, se=FALSE))) +
labs(title ="Viruses positively interacting with module 13") +
theme_bw()
pRed <- ggplot(Red,aes(x = MEred, y = load, col = virus, group = virus)) +
geom_point() +
labs( x = "Module 6 eigengenes", y = "Viral load",
title ="Module 6 - VDV2, VDV4 interaction") +
theme_bw() +
stat_cor(aes(color = virus)) +
geom_smooth(method = "lm", se=FALSE)
# plot the VDV2 and VDV4 together
grid.arrange(pRed, pMag, nrow = 1)
grid.arrange(pVDV2_VDV4,pMag_VDV2, pMag_VDV4, pRed_VDV2,pRed_VDV4 , nrow = 2, ncol = 3)
grid.arrange(pVDV2_VDV4,pMag_VDV2, pMag_VDV4, pRed_VDV2,pRed_VDV4 , nrow = 3, ncol = 2)
grid.arrange(pMag_VDV2, pMag_VDV4, pRed_VDV2,pRed_VDV4 , nrow = 3, ncol = 2)
grid.arrange(pMag_VDV2, pMag_VDV4, pRed_VDV2,pRed_VDV4 , nrow = 2, ncol = 2)
grid.arrange(pMag_VDV2,  pRed_VDV2,pRed_VDV4 ,pMag_VDV4, nrow = 2, ncol = 2)
#################
# (3) module 9 (magenta) and 6 (red) are positively correlated to viruses VDV2 and VDV4. the two viruses are positively correlated.
pMag_VDV2 <- ggplot(dat,aes(x = MEmagenta, y = VDV2)) +
geom_point() +
labs( x = "Module 9 eigengenes", y = "VDV2 load",
title ="Module 9 - VDV2 interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE)
pMag_VDV4 <- ggplot(dat,aes(x = MEmagenta, y = VDV4)) +
geom_point() +
labs( x = "Module 9 eigengenes", y = "VDV4 load",
title ="Module 9 - VDV4 interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE)
pRed_VDV2 <- ggplot(dat,aes(x = MEred, y = VDV2)) +
geom_point() +
labs( x = "Module 6 eigengenes", y = "VDV2 load",
title ="Module 6 - VDV2 interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE)
pRed_VDV4 <- ggplot(dat,aes(x = MEred, y = VDV4)) +
geom_point() +
labs( x = "Module 6 eigengenes", y = "VDV4 load",
title ="Module 6 - VDV4 interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE)
pVDV2_VDV4 <- ggplot(dat,aes(x = VDV2, y = VDV4)) +
geom_point() +
labs( x = "VDV2 load", y = "VDV4 load",
title ="VDV2 - VDV4 interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE,  col = "black")
grid.arrange(pMag_VDV2,  pRed_VDV2,pRed_VDV4 ,pMag_VDV4, nrow = 2, ncol = 2)
pVDV2_VDV4
pVDV2_VDV4 <- ggplot(dat,aes(x = VDV2, y = VDV4)) +
geom_point() +
labs( x = "VDV2 load", y = "VDV4 load",
title ="VDV2 - VDV4 viral load interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE,  col = "black")
pVDV2_VDV4
#################
# (3) module 9 (magenta) and 6 (red) are positively correlated to viruses VDV2 and VDV4. the two viruses are positively correlated.
pMag_VDV2 <- ggplot(dat,aes(x = MEmagenta, y = VDV2)) +
geom_point() +
labs( x = "Module 9 eigengenes", y = "VDV2 load",
title ="VDV2 load - Module 9 interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE)
pMag_VDV4 <- ggplot(dat,aes(x = MEmagenta, y = VDV4)) +
geom_point() +
labs( x = "Module 9 eigengenes", y = "VDV4 load",
title ="VDV4 - Module 9 interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE)
pRed_VDV2 <- ggplot(dat,aes(x = MEred, y = VDV2)) +
geom_point() +
labs( x = "Module 6 eigengenes", y = "VDV2 load",
title ="VDV2 load - Module 6 interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE)
pRed_VDV4 <- ggplot(dat,aes(x = MEred, y = VDV4)) +
geom_point() +
labs( x = "Module 6 eigengenes", y = "VDV4 load",
title ="VDV4 load - Module 6 interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE)
pVDV2_VDV4 <- ggplot(dat,aes(x = VDV2, y = VDV4)) +
geom_point() +
labs( x = "VDV2 load", y = "VDV4 load",
title ="VDV2 - VDV4 viral load interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE,  col = "black")
pVDV2_VDV4
grid.arrange(pMag_VDV2,  pRed_VDV2,pRed_VDV4 ,pMag_VDV4, nrow = 2, ncol = 2)
# plot the all viruses with module 13
grid.arrange(pARV_2_VOV, pBr_virus, nrow = 1)
grid.arrange(pARV_2_VOV,pBr_ARV_2,pBr_VOV_1 ,nrow = 1)
# and the viruses against each other
pARV_2_VOV <- ggplot(dat,aes(x = ARV_2, y = VOV_1)) +
geom_point() +
labs( x = "ARV_2 load", y = "VOV_1 load",
title ="ARV_2 - VOV_1 viral load interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE, col = "black")
pBr_ARV_2 <- ggplot(dat,aes(x = MEbrown, y = ARV_2)) +
geom_point() +
labs( x = "Module 3 eigengenes", y = "ARV_2 load",
title ="ARV_2 load - Module 3 interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE)
pBr_VOV_1 <- ggplot(dat,aes(x = MEbrown, y = VOV_1)) +
geom_point() +
labs( x = "Module 3 eigengenes", y = "VOV_1 load",
title ="VOV_1 load - Module 3 interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE)
# and the viruses against each other
pARV_2_VOV <- ggplot(dat,aes(x = ARV_2, y = VOV_1)) +
geom_point() +
labs( x = "ARV_2 load", y = "VOV_1 load",
title ="ARV_2 - VOV_1 viral load interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE, col = "black")
# plot the all viruses with module 13
grid.arrange(pARV_2_VOV, pBr_virus, nrow = 1)
grid.arrange(pARV_2_VOV,pBr_VOV_1, pBr_ARV_2 ,nrow = 1)
# plot the all viruses with module 13
grid.arrange(pSal_BQCV, pSal_DWVc, pSal_VDV3, pSal_DWVa, nrow = 2, ncol = 2)
##################
# plot each virus separately
pSal_BQCV <- ggplot(dat,aes(x = MEsalmon, y = BQCV)) +
geom_point() +
labs( x = "Module 13 eigengenes", y = "BQCV load",
title ="BQCV load - Module 13 interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE)
pSal_DWVc <- ggplot(dat,aes(x = MEsalmon, y = DWVc)) +
geom_point() +
labs( x = "Module 13 eigengenes", y = "DWVc load",
title ="DWVc load - Module 13 interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE)
pSal_VDV3 <- ggplot(dat,aes(x = MEsalmon, y = VDV3)) +
geom_point() +
labs( x = "Module 13 eigengenes", y = "VDV3 load",
title ="VDV3 load - Module 13 interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE)
pSal_DWVa <- ggplot(dat,aes(x = MEsalmon, y = DWVa)) +
geom_point() +
labs( x = "Module 13 eigengenes", y = "DWVa load",
title ="DWVa load - Module 13 interaction") +
theme_bw() +
stat_cor()+
geom_smooth(method = "lm", se=FALSE)
# plot the all viruses with module 13
grid.arrange(pSal_BQCV, pSal_DWVc, pSal_VDV3, pSal_DWVa, nrow = 2, ncol = 2)
# all four viruses interaction matrix
ggpairs(dat, columns = c("DWVa","DWVc", "BQCV", "VDV3"),
lower = list(continuous = wrap("smooth", size=1.5, se=FALSE))) +
labs(title ="Viruses DWVa, DWVc, BQCV and VDV3 positively interacting with each other") +
theme_bw()
# (1) Mantel test using "ape" library:
mantel.test(corModulTrait_66, virusAbundCor_66, graph = TRUE,
main = "Mantel test",
xlab = "z-statistic", ylab = "Density",
sub = "The vertical line shows the observed z-statistic")
# load the two matrices:
# the module–trait association matrix
names <- load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/moduleTraitCor_66.RData");
names
# and the viral abundance correlogram
names <- load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/virusAbundCor_66.RData");
names
# make corleation matrix of the "moduleTraitCor":
corModulTrait_66 <- cor(moduleTraitCor_66)
# (1) Mantel test using "ape" library:
mantel.test(corModulTrait_66, virusAbundCor_66, graph = TRUE,
main = "Mantel test",
xlab = "z-statistic", ylab = "Density",
sub = "The vertical line shows the observed z-statistic")
# (2) Mantel test using "vegan" library:
mantel(corModulTrait_66, virusAbundCor_66, method="pearson", permutations=1000)
