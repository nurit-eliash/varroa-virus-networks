knitr::opts_chunk$set(echo = TRUE)
# load library
library("data.table")
library("dplyr")
library("tidyverse")
library("vegan")
library("DESeq2")
library("ggfortify")
library("WGCNA")
library("rmarkdown")
library("knitr") # for the markdown
library("kableExtra") # for creating a scrolling table
library("ggplot2") # for plotting
library("ape") # for reading the phylogenetic tree and for mantel.test
library("Biostrings")
library("ggtree") # for plotting the tree
library("ggrepel") # for spreading text labels on the plot
library("scales") # for axis labels notation
library("GO.db")
library("reshape2")
library("RSQLite")
library("AnnotationDbi")
library("GSEABase")
library("GOstats")
library("maps") # for the map background
library("leaflet") #for the interactive maps
library("htmltools")
library("rgdal")
library("grid")
library("gridExtra")
library("GeneOverlap")
library("cluster")
library("ggpmisc")
library("DEGreport")
# load the module network, gene expression and viral load data of the 66 libraries analysis:
names <- load("/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/Varroa_modules_networkConstruction-auto.RData")
names
#load geneTraitSignificance (geneTraitSignificance), module membership (geneModuleMembership) and intramodular connectivity (Alldegrees1) for each gene:
names <- load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/IntraModCon66.RData")
names
names <- load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/geneTraitANDgeneMM_66.RData")
names
#load the genes tpm per library, and viral load:
names <- load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/varroa_virus-01-dataInput.RData")
names
#load the correlation data for the module-trait relationship:
names <- load("/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/moduleTraitCor_66.RData")
names
# and of the 57 libraries analysis:
names <- load("/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/Varroa_modules_networkConstruction-auto_57.RData")
names
names <- load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/IntraModCon57.RData")
names
names <- load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/geneTraitANDgeneMM_57.RData")
names
#load the genes tpm per library, and viral load:
names <- load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/varroa_virus-01-dataInput_57.RData")
names
#load the correlation data for the module-trait relationship:
names <- load("/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/moduleTraitCor_57.RData")
names
# overlap the two modules tables, to check if the modules contain the same genes
# to avoid confusion, i used the module colors for the 66 libs ("moduleColors" 15 modules + grey=genes with no module), and the modules numbers for the 57 libs ("moduleLabels_57" 14 modules + "zero" = genes with no module):
compareModules <- overlapTable(
moduleColors, moduleLabels_57,
na.rm = FALSE, ignore = NULL,
levels1 = NULL, levels2 = NULL)
compareModules
geneInfoMagenta_66 = data.frame(
module = moduleColors,
geneTraitSignificance_66,
geneModuleMembership_66,
IntraModCon = Alldegrees1_66$kWithin) %>%
dplyr::select(c(module, IntraModCon, MMmagenta, GS.DWVa, GS.VDV2, GS.ARV_2)) %>%
dplyr::filter(module == "magenta") %>%
rownames_to_column("genes")
geneInfoBlack_57 = data.frame(
module = moduleColors_57,
geneTraitSignificance_57,
geneModuleMembership_57,
IntraModCon = Alldegrees1_57$kWithin) %>%
dplyr::select(c(module, IntraModCon, MMblack, GS.DWVa, GS.VDV2, GS.ARV_2)) %>%
dplyr::filter(module%in% c("black")) %>%
rownames_to_column("genes")
# make a table of the overlapping genes
overlap <- inner_join(geneInfoMagenta_66, geneInfoBlack_57, by = "genes")
#change the columns names to specify from which analysis it was taken (66libs or 57libs)
overlap <- overlap %>%
dplyr::rename(module_66 = module.x,
module_57 = module.y,
IntraModCon_66 = IntraModCon.x,
IntraModCon_57 = IntraModCon.y,
GS.DWVa_66 = GS.DWVa.x,
GS.DWVa_57 = GS.DWVa.y,
GS.VDV2_66 = GS.VDV2.x,
GS.VDV2_57 = GS.VDV2.y,
GS.ARV_2_66 = GS.ARV_2.x,
GS.ARV_2_57 = GS.ARV_2.y)
nrow(overlap)
overlap
# we have 40 overlapping genes in the magenat and balck modules, as the "overlapTable()" function computed.
# add gene annotation:
# load the annotation file:
annot_varroa <- read_csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/data/annot_varroa.csv", col_names = TRUE, )
# remove the "LOC" from the gene name
annot_varroa$Locus <- str_replace(annot_varroa$Locus, "LOC", '')
# and change the col name to "genes", so it will the same as in the "overlap" table
colnames(annot_varroa)[which(names(annot_varroa) == "Locus")] <- "genes"
head(annot_varroa)
#now join by "genes" name (INNER JOIN: returns rows when there is a match in both tables)
overlap_annot <- inner_join(overlap, annot_varroa, by = "genes") %>%
dplyr::select(c(genes, module_66, module_57,
IntraModCon_66,
IntraModCon_57,
GS.DWVa_66,
GS.DWVa_57,
GS.VDV2_66,
GS.VDV2_57,
GS.ARV_2_66,
GS.ARV_2_57, Name, Accession, 'Protein product', Length, 'Protein Name'))
# and filter out duplicated genes
overlap_annot <-overlap_annot[!duplicated(overlap_annot[,'genes']),]
# how many genes overlap between Magenta module of the 66 libs, and the Black module of the 57 modules?
nrow(overlap_annot)
write_csv(x = as.data.frame(overlap_annot), "results/overlap_annot.csv")
#load the former hub-genes:
hub_old <- read_csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/data/hub_annot_old.csv", col_names = TRUE, )
hub_old$genes <- as.character(hub_old$genes)
# how many of the hub_old genes exist in the magenta module?
#return all rows from x, and all columns from x and y.
f <- left_join(geneInfoMagenta_66, hub_old, by = "genes")
sum(!is.na(f$virus.x))
# only 3 genes of magenta module appear in the former hubgenes analysis
# so to what module these 53 old-hubgenes belong to?
#make a data.frame of all genes with modules:
all.genes.66 <- data.frame(
module = moduleColors,
geneTraitSignificance_66,
GSPadjust_66,
geneModuleMembership_66,
MMPadjust_66,
IntraModCon = Alldegrees1_66$kWithin) %>%
dplyr::select(c(module, IntraModCon, GS.DWVa, pdj.GS.DWVa, GS.VDV2, pdj.GS.VDV2, GS.ARV_2, pdj.GS.ARV_2, MMpurple, padj.MMpurple, MMpink, padj.MMpink)) %>%
rownames_to_column("genes")
left_join(hub_old, all.genes.66, by = "genes")
all.genes.57 <- data.frame(
module = moduleColors_57,
geneTraitSignificance_57,
GSPadjust_57,
geneModuleMembership_57,
MMPadjust_57,
IntraModCon = Alldegrees1_57$kWithin) %>%
dplyr::select(c(module, IntraModCon, GS.DWVa, pdj.GS.DWVa, GS.VDV2, pdj.GS.VDV2, GS.ARV_2, pdj.GS.ARV_2, MMsalmon, padj.MMsalmon)) %>%
rownames_to_column("genes")
left_join(hub_old, all.genes.57, by = "genes")
# prepare a table describing each gene number, short-name and full annotation, of the silenced genes:
genes <- as.factor(c("111250594", "111244103","111244832", "111248360", "111245345", "111248674", "111251059", "111245371", "111244631", "111252566", "111249664"))
annot <- as.factor(c("Sarcalumenin", "glycerol-3-phosphate dehydrogenase", "Calmodulin", "Cuticle-protein8","Cuticle-protein-14", "Glutamate-receptor-3", "Glutamate-gated-chloride-channel-subunit-beta", "Organic-cation-transporter-protein", "Twitchin", "Annulin", "Defense-protein-Hdd11"))
ShortName <- as.factor(c("Sar", "Gly","clmd", "CuP8", "CuP14", "Glut", "Chl", "Trans", "Twitch", "Anl", "HDD"))
silenced.genes <- data.frame(genes, ShortName, annot)
# to what module the silenced genes belong to?
silenced_overlap.66 <- left_join(silenced.genes, all.genes.66, by = "genes")
silenced_overlap.57 <- left_join(silenced.genes, all.genes.57, by = "genes")
silenced_overlap.66
silenced_overlap.57
# first Recalculate MEs with color labels
MEs0 = moduleEigengenes(for_modules, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor_66, 2), "\n(",
signif(moduleTraitPadjust_66, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor_66)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_66,
xLabels = names(b_viruses_load),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-1,1),
main = paste("Varroa Module-viruses relationships, all 66 libraries"))
## (1) virus > module (virus tpm > module eigengene). for the 66 libraries
# first Recalculate MEs with color labels
MEs0 = moduleEigengenes(for_modules_female, moduleColors_57)$eigengenes
MEs_57 = orderMEs(MEs0)
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor_57, 2), "\n(",
signif(moduleTraitPadjust_57, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor_57)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_57,
xLabels = names(b_viruses_load_57),
yLabels = names(MEs_57),
ySymbols = names(MEs_57),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-1,1),
main = paste("Varroa Module-viruses relationships females only libraries"))
# make expression (tpm) of all silenced genes
genes <- as.factor(c("111250594", "111244103","111244832", "111248360", "111245345", "111248674", "111251059", "111245371", "111244631", "111252566", "111249664"))
silenced_exp <- for_modules %>%
dplyr::select(genes)  %>%
rownames_to_column("Library")
# make table of eigengens of the silenced genes
# first Recalculate MEs with color labels
MEs0 = moduleEigengenes(for_modules, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
Sil_MEs <- as.character(c("MEpurple", "MEgreen", "MEpink"))
silenced_MEs <- MEs %>%
dplyr::select(all_of(Sil_MEs)) %>%
rownames_to_column("Library")
# correlate gene expression (for each of the silenced genes) with eigengenes (of the gene to its module).
geneMEcor <- as.matrix(cor(column_to_rownames(silenced_exp, "Library"), column_to_rownames(silenced_MEs, "Library"), "p"))
plot <- left_join(silenced_MEs, silenced_exp, by = "Library")
# plot the correlation of each gene and its MEs
GlyPurple <- ggplot(plot, aes(x=plot$"111244103", y=MEpurple)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("Gly gene expression (tpm)") +
ylab("Purple MEs)") +
ggtitle("Gly expression correlation\n to Purple ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
SarPink <- ggplot(plot, aes(x=plot$"111250594", y=MEpink)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("Sar gene expression (tpm)") +
ylab("Pink MEs)") +
ggtitle("Sar expression correlation\n to Pink ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
clmdPurple <- ggplot(plot, aes(x=plot$"111244832", y=MEpurple)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("clmd gene expression (tpm)") +
ylab("Purple MEs)") +
ggtitle("clmd expression correlation\n to Purple ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
CuP8Purple <- ggplot(plot, aes(x=plot$"111248360", y=MEpurple)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("CuP8 gene expression (tpm)") +
ylab("Purple MEs)") +
ggtitle("CuP8 expression correlation\n to Purple ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
CuP14Purple <- ggplot(plot, aes(x=plot$"111245345", y=MEpurple)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("CuP14 gene expression (tpm)") +
ylab("Purple MEs)") +
ggtitle("CuP14 expression correlation\n to Purple ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
GlutPurple <- ggplot(plot, aes(x=plot$"111248674", y=MEpurple)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("Glut gene expression (tpm)") +
ylab("Purple MEs)") +
ggtitle("Glut expression correlation\n to Purple ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
ChlPurple <- ggplot(plot, aes(x=plot$"111251059", y=MEpurple)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("Chl gene expression (tpm)") +
ylab("Purple MEs)") +
ggtitle("Chl expression correlation\n to Purple ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
TwitchPurple <- ggplot(plot, aes(x=plot$"111244631", y=MEpurple)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("Twitch gene expression (tpm)") +
ylab("Purple MEs)") +
ggtitle("Twitch expression correlation\n to Purple ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
HDDPurple <- ggplot(plot, aes(x=plot$"111249664", y=MEpurple)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("HDD gene expression (tpm)") +
ylab("Purple MEs)") +
ggtitle("HDD expression correlation\n to Purple ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
AnlPink <- ggplot(plot, aes(x=plot$"111252566", y=MEpink)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("Anl gene expression (tpm)") +
ylab("pink MEs)") +
ggtitle("Anl expression correlation\n to pink ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
TransGreen <- ggplot(plot, aes(x=plot$"111245371", y=MEgreen)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("Trans gene expression (tpm)") +
ylab("Green MEs)") +
ggtitle("Trans expression correlation\n to Green ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
# all purple-module genes:
sizeGrWindow(20,10)
grid.arrange(SarPink, clmdPurple, CuP8Purple, CuP14Purple, GlutPurple, ChlPurple,  nrow = 2)
# all pink-module genes:
grid.arrange(SarPink, AnlPink, nrow = 1)
# all green-module genes:
grid.arrange(TransGreen, nrow = 1)
#maybe better to make in a heatmap?
grid.arrange(SarPink, clmdPurple, CuP8Purple, CuP14Purple, GlutPurple, ChlPurple,  nrow = 2)
# make expression (tpm) of all silenced genes
genes <- as.factor(c("111250594", "111244103","111244832", "111248360", "111245345", "111248674", "111251059", "111245371", "111244631", "111252566", "111249664"))
silenced_exp <- for_modules %>%
dplyr::select(genes)  %>%
rownames_to_column("Library")
# make table of eigengens of the silenced genes
# first Recalculate MEs with color labels
MEs0 = moduleEigengenes(for_modules, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
Sil_MEs <- as.character(c("MEpurple", "MEgreen", "MEpink"))
silenced_MEs <- MEs %>%
dplyr::select(all_of(Sil_MEs)) %>%
rownames_to_column("Library")
# correlate gene expression (for each of the silenced genes) with eigengenes (of the gene to its module).
geneMEcor <- as.matrix(cor(column_to_rownames(silenced_exp, "Library"), column_to_rownames(silenced_MEs, "Library"), "p"))
plot <- left_join(silenced_MEs, silenced_exp, by = "Library")
# plot the correlation of each gene and its MEs
GlyPurple <- ggplot(plot, aes(x=plot$"111244103", y=MEpurple)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("Gly gene expression (tpm)") +
ylab("Purple MEs)") +
ggtitle("Gly expression correlation\n to Purple ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
SarPink <- ggplot(plot, aes(x=plot$"111250594", y=MEpink)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("Sar gene expression (tpm)") +
ylab("Pink MEs)") +
ggtitle("Sar expression correlation\n to Pink ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
clmdPurple <- ggplot(plot, aes(x=plot$"111244832", y=MEpurple)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("clmd gene expression (tpm)") +
ylab("Purple MEs)") +
ggtitle("clmd expression correlation\n to Purple ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
CuP8Purple <- ggplot(plot, aes(x=plot$"111248360", y=MEpurple)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("CuP8 gene expression (tpm)") +
ylab("Purple MEs)") +
ggtitle("CuP8 expression correlation\n to Purple ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
CuP14Purple <- ggplot(plot, aes(x=plot$"111245345", y=MEpurple)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("CuP14 gene expression (tpm)") +
ylab("Purple MEs)") +
ggtitle("CuP14 expression correlation\n to Purple ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
GlutPurple <- ggplot(plot, aes(x=plot$"111248674", y=MEpurple)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("Glut gene expression (tpm)") +
ylab("Purple MEs)") +
ggtitle("Glut expression correlation\n to Purple ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
ChlPurple <- ggplot(plot, aes(x=plot$"111251059", y=MEpurple)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("Chl gene expression (tpm)") +
ylab("Purple MEs)") +
ggtitle("Chl expression correlation\n to Purple ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
TwitchPurple <- ggplot(plot, aes(x=plot$"111244631", y=MEpurple)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("Twitch gene expression (tpm)") +
ylab("Purple MEs)") +
ggtitle("Twitch expression correlation\n to Purple ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
HDDPurple <- ggplot(plot, aes(x=plot$"111249664", y=MEpurple)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("HDD gene expression (tpm)") +
ylab("Purple MEs)") +
ggtitle("HDD expression correlation\n to Purple ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
AnlPink <- ggplot(plot, aes(x=plot$"111252566", y=MEpink)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("Anl gene expression (tpm)") +
ylab("pink MEs)") +
ggtitle("Anl expression correlation\n to pink ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
TransGreen <- ggplot(plot, aes(x=plot$"111245371", y=MEgreen)) +
geom_point() +
geom_cor(method = "pearson", xpos = 1) +
xlab("Trans gene expression (tpm)") +
ylab("Green MEs)") +
ggtitle("Trans expression correlation\n to Green ME") +
theme(
plot.title = element_text(color="black", size=14, face="bold"),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14))
# all purple-module genes:
sizeGrWindow(20,10)
grid.arrange(SarPink, clmdPurple, CuP8Purple, CuP14Purple, GlutPurple, ChlPurple,  nrow = 2)
# all pink-module genes:
grid.arrange(SarPink, AnlPink, nrow = 1)
# all green-module genes:
grid.arrange(TransGreen, nrow = 1)
#maybe better to make in a heatmap?
grid.arrange(SarPink, clmdPurple, CuP8Purple, CuP14Purple, GlutPurple, ChlPurple,  nrow = 2)
# first Recalculate MEs with color labels
MEs0 = moduleEigengenes(for_modules, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
sizeGrWindow(10,6)
# Will display correlations and their p-values
textMatrix = paste(signif(moduleTraitCor_66, 2), "\n(",
signif(moduleTraitPadjust_66, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor_66)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_66,
xLabels = names(b_viruses_load),
yLabels = names(MEs),
ySymbols = names(MEs),
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-1,1),
main = paste("Varroa Module-viruses relationships, all 66 libraries"))
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(tidyverse))
dat <- read_csv("/Users/nuriteliash/Documents/GitHub/varroa-gene-silencing/data/virus_in_silenced.csv")
results <- data.frame()
for (gene in unique(dat$Experiment))
for (virus in unique(dat$Gene)) {
test <- wilcox.test(RQ ~ Treatment, alternative = "two.sided", data = filter(dat, Experiment == gene & Gene == virus) )
results <- rbind(results, data.frame(gene = gene, virus = virus, pvalue = test$p.value))
}
viralLoad <- group_by(results, gene) %>% mutate(padj = p.adjust(pvalue, method = "fdr"))
View(viralLoad)
