library("kableExtra") # for creating a scrolling table
library("ggplot2") # for plotting
library("ape") # for reading the phylogenetic tree and for mantel.test
library("Biostrings")
library("ggtree") # for plotting the tree
library("ggrepel") # for spreading text labels on the plot
library("scales") # for axis labels notation
library("GO.db")
library("reshape2")
library("RSQLite")
library("AnnotationDbi")
library("GSEABase")
library("GOstats")
library("maps") # for the map background
library("leaflet") #for the interactive maps
library("htmltools")
library("rgdal")
library("grid")
library("gridExtra")
library("GeneOverlap")
library("cluster")
library("ggpubr")
library("GGally")
#if you are starting from here,
# Load the expression and trait data saved in the first part
lnames <- load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/varroa_virus-01-dataInput.RData");
#The variable lnames contains the names of loaded variables.
lnames
# Load network data saved in the second part.
lnames = load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/Varroa_modules_networkConstruction-auto.RData");
lnames
MEs
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(for_modules, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
MEs
moduleEigengenes
library(dplyr)
library(tidyverse)
library(vegan)
library(DESeq2)
library(ggfortify)
library(WGCNA)
library(rmarkdown)
library("knitr") # for the markdown
library("kableExtra") # for creating a scrolling table
library("ggplot2") # for plotting
library("ape") # for reading the phylogenetic tree and for mantel.test
library("Biostrings")
library("ggtree") # for plotting the tree
library("ggrepel") # for spreading text labels on the plot
library("scales") # for axis labels notation
library("GO.db")
library("reshape2")
library("RSQLite")
library("AnnotationDbi")
library("GSEABase")
library("GOstats")
library("maps") # for the map background
library("leaflet") #for the interactive maps
library("htmltools")
library("rgdal")
library("grid")
library("gridExtra")
library("GeneOverlap")
library(cluster)
# change "cyan" to the name of the desired module, in the first line: [moduleColors=="cyan"], and in the final "write.csv(file = "GO_term_enrichment_**cyan**BP.csv")
ME <- names(for_modules)[moduleColors=="salmon"]
ME_df <- data.frame(geneno = ME,Gene.id = ME)
ME_df$Gene.id <- paste("LOC", ME_df$Gene.id, sep="")
ME
genes.vd <- as.integer(unique(ME_df$geneno))
head(genes.vd)
geneno
ME_df
geneno
genes.vd
head(genes.vd)
genes.vd
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
over.vd <- hyperGTest(params.vd)
gsc.vd
#Preparing the GO frame
annot.vd <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/data/VdesGOready2.csv")
annot.vd2 <- annot.vd %>%
mutate(evidence = "IEA") %>%
dplyr::select(go_id = GO.ids, evidence, gene = Gene.id)
head(annot.vd2)
goFrame.vd <-GOFrame(annot.vd2, organism = "Vd")
goAllFrame.vd <-GOAllFrame(goFrame.vd)
gsc.vd <-GeneSetCollection(goAllFrame.vd, setType = GOCollection())
universe.vd <- unique(annot.vd2$gene)
head(universe.vd)
# change "cyan" to the name of the desired module, in the first line: [moduleColors=="cyan"], and in the final "write.csv(file = "GO_term_enrichment_**cyan**BP.csv")
ME <- names(for_modules)[moduleColors=="salmon"]
ME_df <- data.frame(geneno = ME,Gene.id = ME)
ME_df$Gene.id <- paste("LOC", ME_df$Gene.id, sep="")
genes.vd <- as.integer(unique(ME_df$geneno))
head(genes.vd)
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
over.vd <- hyperGTest(params.vd)
geneIds
#Preparing the GO frame
annot.vd <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/data/VdesGOready2.csv")
annot.vd2 <- annot.vd %>%
mutate(evidence = "IEA") %>%
dplyr::select(go_id = GO.ids, evidence, gene = Gene.id)
#Preparing the GO frame
annot.vd <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/data/VdesGOready2.csv")
annot.vd2 <- annot.vd %>%
mutate(evidence = "IEA") %>%
dplyr::select(go_id = GO.ids, evidence, gene = Gene.id)
head(annot.vd2)
goFrame.vd <-GOFrame(annot.vd2, organism = "Vd")
goAllFrame.vd <-GOAllFrame(goFrame.vd)
gsc.vd <-GeneSetCollection(goAllFrame.vd, setType = GOCollection())
universe.vd <- unique(annot.vd2$gene)
head(universe.vd)
# change "cyan" to the name of the desired module, in the first line: [moduleColors=="cyan"], and in the final "write.csv(file = "GO_term_enrichment_**cyan**BP.csv")
ME <- names(for_modules)[moduleColors=="salmon"]
ME_df <- data.frame(geneno = ME,Gene.id = ME)
ME_df$Gene.id <- paste("LOC", ME_df$Gene.id, sep="")
genes.vd <- as.integer(unique(ME_df$geneno))
head(genes.vd)
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
library("dplyr")
library("tidyverse")
library("vegan")
library("DESeq2")
library("ggfortify")
library("WGCNA")
library("rmarkdown")
library("knitr") # for the markdown
library("kableExtra") # for creating a scrolling table
library("ggplot2") # for plotting
library("ape") # for reading the phylogenetic tree and for mantel.test
library("Biostrings")
library("ggtree") # for plotting the tree
library("ggrepel") # for spreading text labels on the plot
library("scales") # for axis labels notation
library("GO.db")
library("reshape2")
library("RSQLite")
library("AnnotationDbi")
library("GSEABase")
library("GOstats")
library("maps") # for the map background
library("leaflet") #for the interactive maps
library("htmltools")
library("rgdal")
library("grid")
library("gridExtra")
library("GeneOverlap")
library("cluster")
#the working directory is in GitHb:
setwd("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks")
#I save all the big outputs results in my local storage:
"/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results"
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
library("tidyverse")
library("vegan")
library("DESeq2")
library("ggfortify")
library("WGCNA")
library("rmarkdown")
library("knitr") # for the markdown
library("kableExtra") # for creating a scrolling table
library("ggplot2") # for plotting
library("ape") # for reading the phylogenetic tree and for mantel.test
library("Biostrings")
library("ggtree") # for plotting the tree
library("ggrepel") # for spreading text labels on the plot
library("scales") # for axis labels notation
library("GO.db")
library("reshape2")
library("RSQLite")
library("AnnotationDbi")
library("GSEABase")
library("GOstats")
library("maps") # for the map background
library("leaflet") #for the interactive maps
library("htmltools")
library("rgdal")
library("grid")
library("gridExtra")
library("GeneOverlap")
library("cluster")
library("ggpubr")
library("GGally")
# before joining the tables, take out the SRA columns:
Modules <- MEs %>%
rownames_to_column("library")
viruses_load <- b_viruses_load %>%
rownames_to_column("library")
# make a new table with SRAs as rows, and viral loads and modules in the columns:
dat <- left_join(viruses_load, Modules, by = "library")
# take out 6 male libraries:
x <- dat %>%
dplyr::filter(!(library %in% c("SRR5760848","SRR5760838", "SRR5760828", "SRR5760818", "SRR5377266", "SRR5377265")))
# (3) module 9 (magenta) and 6 (red) are positively correlated to viruses VDV2 and VDV4. the two viruses are positively correlated.
pMag_VDV2 <- ggplot(dat,aes(x = MEmagenta, y = log(VDV2+0.1))) +
geom_point() +
labs( x = "Module 9 eigengenes", y = "VDV2 load (logTPM)", title ="VDV2 load - Module 9 interaction") +
theme_classic() +
stat_cor() +
geom_smooth(method = "lm", se=FALSE)+
theme(title = element_blank())
pMag_VDV4 <- ggplot(dat,aes(x = MEmagenta, y = log(VDV4+0.1))) +
geom_point() +
labs( x = "Module 9 eigengenes", y = "VDV4 load (logTPM)", title ="VDV4 - Module 9 interaction") +
theme_classic() +
stat_cor() +
geom_smooth(method = "lm", se=FALSE)+
theme(title = element_blank())
pRed_VDV2 <- ggplot(dat,aes(x = MEred, y = log(VDV2+0.1))) +
geom_point() +
labs( x = "Module 6 eigengenes", y = "VDV2 load (logTPM)", title ="VDV2 load - Module 6 interaction") +
theme_classic() +
stat_cor() +
geom_smooth(method = "lm", se=FALSE) +
theme(title = element_blank())
pRed_VDV4 <- ggplot(dat,aes(x = MEred, y = log(VDV4+0.1))) +
geom_point() +
labs( x = "Module 6 eigengenes", y = "VDV4 load (logTPM)", title ="VDV4 logload - Module 6 interaction") +
theme_classic() +
stat_cor() +
geom_smooth(method = "lm", se=FALSE) +
theme(title = element_blank())
pVDV2_VDV4 <- ggplot(dat,aes(x = log(VDV4+0.1), y = log(VDV2+0.1))) +
geom_point() +
labs( x = "VDV4 load (logTPM)", y = "VDV2 load (logTPM)", title ="VDV2 - VDV4 viral load interaction") +
theme_classic() +
stat_cor(size=7) +
geom_smooth(method = "lm", se=FALSE, color = "#23A242", size=3) +
theme(text = element_text(size=20))
pVDV2_VDV4
# load the two matrices:
# the moduleâ€“trait association matrix
load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/moduleTraitCor_66.RData");
# and the viral abundance correlogram
load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/virusAbundCor_66.RData");
# make correlation matrix of the "moduleTraitCor":
corModulTrait_66 <- cor(moduleTraitCor_66)
# (1) Mantel test using "ape" library:
mantel.test(corModulTrait_66, virusAbundCor_66, graph = TRUE,
main = "Mantel test",
xlab = "z-statistic", ylab = "Density",
sub = "The vertical line shows the observed z-statistic")
# (2) Mantel test using "vegan" library:
mantel(corModulTrait_66, virusAbundCor_66, method="pearson", permutations=1000)
#plot the correlation
verboseScatterplot(x = virusAbundCor_66, y = corModulTrait_66, main = "Viral abundance predicts varroa-virus interaction", xlab = "Viruses interaction", ylab = "Varroa-virus interaction", abline = T, abline.color = "black")
verboseScatterplot(x = corModulTrait_66, y = virusAbundCor_66, main = "Viral abundance predicts varroa-virus interaction", xlab = "Correlation of viral interaction with varroa modules", ylab = "Correlation of viral abundances", abline = T, abline.color = "black")
library("dplyr")
library("tidyverse")
library("vegan")
library("DESeq2")
library("ggfortify")
library("WGCNA")
library("rmarkdown")
library("knitr") # for the markdown
library("kableExtra") # for creating a scrolling table
library("ggplot2") # for plotting
library("ape") # for reading the phylogenetic tree and for mantel.test
library("Biostrings")
library("ggtree") # for plotting the tree
library("ggrepel") # for spreading text labels on the plot
library("scales") # for axis labels notation
library("GO.db")
library("reshape2")
library("RSQLite")
library("AnnotationDbi")
library("GSEABase")
library("GOstats")
library("maps") # for the map background
library("leaflet") #for the interactive maps
library("htmltools")
library("rgdal")
library("grid")
library("gridExtra")
library("GeneOverlap")
library("cluster")
library("rmdformats")
library("corrplot")
library("viridis")
library("hrbrthemes")
library("ggthemes")
library("RColorBrewer")
library("naniar")
knitr::opts_chunk$set(echo = TRUE)
viruses_load <- readRDS(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/viruses_load.RData")
# prepare the 'viruses_load' table, with 15 viruses,
# excluding viruses with 'zero tpm': "CBPV", "AFV", "ANV" , "VPVL_46", "VPVL_36", "SBPV", also excluding viruses with low abundance :"KBV", "LSV".  left with 15 viruses
a_viruses_load_66 <- viruses_load %>%
filter(description %in% c("DWVa", "ARV_2","VOV_1", "BMV","AmFV","ABPV","VTLV","IAPV","SV","VDV1/DWVb","DWVc","BQCV","VDV3","VDV2","VDV4")) %>%
column_to_rownames("description") %>%
transposeBigData() %>%
rownames_to_column("library") %>%
#identify and remove the row numbers of the outlierd libraries (found by PCA)
#filter(!(library %in% c("SRR5109825", "SRR5109827", "SRR533974" , "SRR3927496", "SRR8867385"))) %>%
column_to_rownames("library")
# correlate viruses load (66 libs)
corrplot2 <- function(data,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 75,
number.font = 1,
number.cex = 0.5,
mar = c(0, 0, 0, 0)) {
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#053061","#2166ac","#4393c3","#92c5de","#d1e5f0","#f7f7f7","#fddbc7","#f4a582","#d6604d","#b2182b","#67001f"))
corrplot(mat,
method = "color", col = col(200),
mar = mar,
type = type, order = order,
tl.col = "black",
# hide correlation coefficients on the diagonal
diag = diag
)
}
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = T,
type = "upper",
tl.srt = 75
)
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = F,
type = "upper",
tl.srt = 75
)
corrplot(mat,
method = "color", col = col(200),
mar = mar,
type = type, order = order,
tl.col = "white",
# hide correlation coefficients on the diagonal
diag = diag
)
# correlate viruses load (66 libs)
corrplot2 <- function(data,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 75,
number.font = 1,
number.cex = 0.5,
mar = c(0, 0, 0, 0)) {
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#053061","#2166ac","#4393c3","#92c5de","#d1e5f0","#f7f7f7","#fddbc7","#f4a582","#d6604d","#b2182b","#67001f"))
corrplot(mat,
method = "color", col = col(200),
mar = mar,
type = type, order = order,
tl.col = "white",
# hide correlation coefficients on the diagonal
diag = diag
)
}
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = F,
type = "upper",
tl.srt = 75
)
# correlate viruses load (66 libs)
corrplot2 <- function(data,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 75,
number.font = 1,
number.cex = 0.5,
mar = c(0, 0, 0, 0)) {
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#053061","#2166ac","#4393c3","#92c5de","#d1e5f0","#f7f7f7","#fddbc7","#f4a582","#d6604d","#b2182b","#67001f"))
corrplot(mat,
method = "color", col = col(200),
mar = mar,
type = type, order = order,
tl.col = "black",
# hide correlation coefficients on the diagonal
diag = diag
)
}
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = F,
type = "upper",
tl.srt = 75
)
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = F,
type = "upper",
tl.srt = 75
)+theme_linedraw()
+theme_linedraw()
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = F,
type = "upper",
tl.srt = 75
)+theme_linedraw()
virusAbundCor_66
