p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#053061","#2166ac","#4393c3","#92c5de","#d1e5f0","#f7f7f7","#fddbc7","#f4a582","#d6604d","#b2182b","#67001f"))
corrplot(mat,
method = "color", col = col(200),
mar = mar,
type = type, order = order,
tl.col = "black", # replace with "white" to hide the viruses names, as in the plot for the MS.
# hide correlation coefficients on the diagonal
diag = diag
)
}
# plot the correlogram
virusAbundCor_66 <- corrplot2(
data = viruses_load_15,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = F,
type = "upper",
tl.srt = 75)
# save the matrix for future analysis (Mantel)
#save(virusAbundCor_66, file = "results/virusAbundCor_66.RData")
# and the table of viral load of the 15 viruses in 66 libraries:
# save(viruses_load_15, file = "results/viruses_load_15.rds")
net = blockwiseModules(for_modules, power = 12,
TOMType = "unsigned", minModuleSize = 30,
reassignThreshold = 0, mergeCutHeight = 0.25, #0.25 means a correlation of 0.75
numericLabels = TRUE, pamRespectsDendro = FALSE,
#saveTOMs = TRUE,
#saveTOMFileBase = "/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/Varroa_modulesTOM",
verbose = 3)
# To see how many modules were identified and what the module sizes are, one can use table(net$colors).
table(net$colors)
# For correlating varroa modules to viral load, we gonna use the table of 15 viruses saved in chunk "viral correlation", in section "viral correlation matrix", and correlated these to the varroa modules eigengenes found in the previous chunk.
# First we load the two data:
# viruses_load_15 <- read_rds("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/viruses_load_15.rds")
# load(file = "Varroa_modules_networkConstruction-auto.RData")
# Define numbers of genes and samples
nGenes = ncol(for_modules);
nSamples = nrow(for_modules)
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(for_modules, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
# correlate the modules eigengenes (MEs) with the viral load (viruses_load_15)
moduleTraitCor = cor(MEs, viruses_load_15, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
### Controlling the false discovery rate: Benjamini–Hochberg procedure ###
# using p.adjust function, for all comparisons, 15 modules and 15 viruses (m=225).
# first make the p-value matrix into a dataframe
moduleTraitPvalue_0 <- as.data.frame(moduleTraitPvalue)
# then "gather" all the p-values, so they will apear in one column
longer_Pvalue <- moduleTraitPvalue_0 %>%
rownames_to_column("module") %>%
gather("virus", "pvalue", -module)
# now calculate the p.adjust for each p-value
Padjust <- p.adjust(longer_Pvalue$pvalue, method = "fdr")
# and add the column of adjusted pvalues
Padjust <- add_column(longer_Pvalue, Padjust)
# now spread it back
moduleTraitPadjust <- Padjust %>%
dplyr::select(-pvalue) %>%
group_by(virus) %>%
pivot_wider(names_from = virus, values_from = Padjust)
moduleTraitPadjust <- column_to_rownames(moduleTraitPadjust, "module")
# before correlating, make the two dataframes into "matrices"
moduleTraitCor_66 <- as.matrix(moduleTraitCor)
moduleTraitPadjust_66 <- as.matrix(moduleTraitPadjust)
#  Display correlations and their adjusted p-values
sizeGrWindow(10,6)
textMatrix = paste(signif(moduleTraitCor_66, 2), "\n(",
signif(moduleTraitPadjust_66, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor_66)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_66,
xLabels = names(viruses_load_15),
yLabels = names(MEs),
#xLabelsAngle = 90,
ySymbols = names(MEs),
colorLabels = FALSE,
colors = hcl.colors(n = 50, palette = "RdBu", alpha = NULL, rev = FALSE, fixup = TRUE),
invertColors = TRUE,
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-1,1),
main = paste("Varroa Module-viruses relationships"))
# save the matrices for next analyses
# save(moduleTraitCor_66,moduleTraitPadjust_66, file = "/results/moduleTraitCor_66.RData")
# For correlating varroa modules to viral load, we gonna use the table of 15 viruses saved in chunk "viral correlation", in section "viral correlation matrix", and correlated these to the varroa modules eigengenes found in the previous chunk.
# First we load the two data:
# viruses_load_15 <- read_rds("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/viruses_load_15.rds")
# load(file = "Varroa_modules_networkConstruction-auto.RData")
# Define numbers of genes and samples
nGenes = ncol(for_modules);
nSamples = nrow(for_modules)
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(for_modules, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
# correlate the modules eigengenes (MEs) with the viral load (viruses_load_15)
moduleTraitCor = cor(MEs, viruses_load_15, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
### Controlling the false discovery rate: Benjamini–Hochberg procedure ###
# using p.adjust function, for all comparisons, 15 modules and 15 viruses (m=225).
# first make the p-value matrix into a dataframe
moduleTraitPvalue_0 <- as.data.frame(moduleTraitPvalue)
# then "gather" all the p-values, so they will apear in one column
longer_Pvalue <- moduleTraitPvalue_0 %>%
rownames_to_column("module") %>%
gather("virus", "pvalue", -module)
# now calculate the p.adjust for each p-value
Padjust <- p.adjust(longer_Pvalue$pvalue, method = "fdr")
# and add the column of adjusted pvalues
Padjust <- add_column(longer_Pvalue, Padjust)
# now spread it back
moduleTraitPadjust <- Padjust %>%
dplyr::select(-pvalue) %>%
group_by(virus) %>%
pivot_wider(names_from = virus, values_from = Padjust)
moduleTraitPadjust <- column_to_rownames(moduleTraitPadjust, "module")
# before correlating, make the two dataframes into "matrices"
moduleTraitCor_66 <- as.matrix(moduleTraitCor)
moduleTraitPadjust_66 <- as.matrix(moduleTraitPadjust)
#  Display correlations and their adjusted p-values
sizeGrWindow(10,6)
textMatrix = paste(signif(moduleTraitCor_66, 2), "\n(",
signif(moduleTraitPadjust_66, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor_66)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_66,
xLabels = names(viruses_load_15),
yLabels = names(MEs),
#xLabelsAngle = 90,
ySymbols = names(MEs),
colorLabels = FALSE,
colors = hcl.colors(n = 50, palette = "RdBu", alpha = NULL, rev = FALSE, fixup = TRUE),
invertColors = TRUE,
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-1,1),
main = paste("Varroa Module-viruses relationships"))
# save the matrices for next analyses
# save(moduleTraitCor_66,moduleTraitPadjust_66, file = "/results/moduleTraitCor_66.RData")
# Define numbers of genes and samples
nGenes = ncol(for_modules);
nSamples = nrow(for_modules)
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(for_modules, moduleColors)$eigengenes
# open a graphics window
sizeGrWindow(12, 9)
# Convert labels to colors for plotting
mergedColors = labels2colors(net$colors)
# Plot the dendrogram and the module colors underneath
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],
"Module colors",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
MEs = net$MEs;
geneTree = net$dendrograms[[1]];
# save(MEs, moduleLabels, moduleColors, geneTree, file = "/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/Varroa_modules_networkConstruction-auto.RData")
# For correlating varroa modules to viral load, we gonna use the table of 15 viruses saved in chunk "viral correlation", in section "viral correlation matrix", and correlated these to the varroa modules eigengenes found in the previous chunk.
# First we load the two data:
# viruses_load_15 <- read_rds("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/viruses_load_15.rds")
# load(file = "Varroa_modules_networkConstruction-auto.RData")
# Define numbers of genes and samples
nGenes = ncol(for_modules);
nSamples = nrow(for_modules)
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(for_modules, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
# correlate the modules eigengenes (MEs) with the viral load (viruses_load_15)
moduleTraitCor = cor(MEs, viruses_load_15, use = "p");
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
### Controlling the false discovery rate: Benjamini–Hochberg procedure ###
# using p.adjust function, for all comparisons, 15 modules and 15 viruses (m=225).
# first make the p-value matrix into a dataframe
moduleTraitPvalue_0 <- as.data.frame(moduleTraitPvalue)
# then "gather" all the p-values, so they will apear in one column
longer_Pvalue <- moduleTraitPvalue_0 %>%
rownames_to_column("module") %>%
gather("virus", "pvalue", -module)
# now calculate the p.adjust for each p-value
Padjust <- p.adjust(longer_Pvalue$pvalue, method = "fdr")
# and add the column of adjusted pvalues
Padjust <- add_column(longer_Pvalue, Padjust)
# now spread it back
moduleTraitPadjust <- Padjust %>%
dplyr::select(-pvalue) %>%
group_by(virus) %>%
pivot_wider(names_from = virus, values_from = Padjust)
moduleTraitPadjust <- column_to_rownames(moduleTraitPadjust, "module")
# before correlating, make the two dataframes into "matrices"
moduleTraitCor_66 <- as.matrix(moduleTraitCor)
moduleTraitPadjust_66 <- as.matrix(moduleTraitPadjust)
#  Display correlations and their adjusted p-values
sizeGrWindow(10,6)
textMatrix = paste(signif(moduleTraitCor_66, 2), "\n(",
signif(moduleTraitPadjust_66, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor_66)
par(mar = c(6, 8.5, 3, 3));
# Display the correlation values within a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor_66,
xLabels = names(viruses_load_15),
yLabels = names(MEs),
#xLabelsAngle = 90,
ySymbols = names(MEs),
colorLabels = FALSE,
colors = hcl.colors(n = 50, palette = "RdBu", alpha = NULL, rev = FALSE, fixup = TRUE),
invertColors = TRUE,
textMatrix = textMatrix,
setStdMargins = FALSE,
cex.text = 0.7,
zlim = c(-1,1),
main = paste("Varroa Module-viruses relationships"))
# save the matrices for next analyses
# save(moduleTraitCor_66,moduleTraitPadjust_66, file = "/results/moduleTraitCor_66.RData")
# names (colors) of the modules
modNames = substring(names(MEs), 3)
# virusNames = substring(names(viruses_load_15), 1)
#make a table of the Module-membership ("MM") of each gene (which is its correlation coefficient, pearson)
geneModuleMembership_66 = as.data.frame(cor(for_modules, MEs, use = "p"));
MMPvalue_66 = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership_66), nSamples));
### Controlling the false discovery rate: Benjamini–Hochberg procedure ###
# using p.adjust function, for all comparisons, 15 modules and 15 viruses (m=225).
# first make the p-value matrix into a dataframe
MMPvalue_66_0 <- as.data.frame(MMPvalue_66)
# then "gather" all the p-values, so they will appear in one column
longer_Pvalue <- MMPvalue_66_0 %>%
rownames_to_column("module") %>%
gather("virus", "pvalue", -module)
# now calculate the p.adjust for each p-value
Padjust <- p.adjust(longer_Pvalue$pvalue, method = "fdr")
# and add the column of adjusted pvalues
Padjust <- add_column(longer_Pvalue, Padjust)
# now spread it back
MMPadjust_66 <- Padjust %>%
dplyr::select(-pvalue) %>%
group_by(virus) %>%
pivot_wider(names_from = virus, values_from = Padjust)
MMPadjust_66 <- column_to_rownames(MMPadjust_66, "module")
#change the name of the columns to start with "MM" then the module name
names(geneModuleMembership_66) = paste("MM", modNames, sep="");
names(MMPadjust_66) = paste("padj.MM", modNames, sep="");
# add gene annotation:
# load the annotation file:
annot_varroa <- read_csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/data/annot_varroa.csv", col_names = TRUE, )
# remove the "LOC" from the gene name
annot_varroa$Locus <- str_replace(annot_varroa$Locus, "LOC", '')
# and change the col name to "genes", so it will the same as in the "overlap" table
colnames(annot_varroa)[which(names(annot_varroa) == "Locus")] <- "genes"
head(annot_varroa)
# and filter out duplicated genes
# there are 10,245 unique genes, as many of the genes are coding for a few proteins
length(unique(annot_varroa$genes))
# count the number of duplicates genes, out of the
count(duplicated(annot_varroa$genes))
genePurple = data.frame(
module = moduleColors,
geneModuleMembership_66,
MMPadjust_66) %>%
dplyr::select(c(module, MMpurple, padj.MMpurple)) %>%
dplyr::filter(module == "purple") %>%
replace(genePurple$module, Module.10.purple) %>%
rownames_to_column("genes")
genePurple = data.frame(
module = moduleColors,
geneModuleMembership_66,
MMPadjust_66) %>%
dplyr::select(c(module, MMpurple, padj.MMpurple)) %>%
dplyr::filter(module == "purple")
genePurple
View(genePurple)
data.frame(
module = moduleColors,
geneModuleMembership_66,
MMPadjust_66) %>%
dplyr::select(c(module, MMpurple, padj.MMpurple)) %>%
dplyr::filter(module == "purple") %>%
mutate(moduleNumb = "Module.10")
data.frame(
module = moduleColors,
geneModuleMembership_66,
MMPadjust_66) %>%
dplyr::select(c(module = "moduleCol", MMpurple, padj.MMpurple)) %>%
dplyr::filter(module == "purple") %>%
mutate(moduleNum = "Module.10")
data.frame(
moduleCol = moduleColors,
geneModuleMembership_66,
MMPadjust_66) %>%
dplyr::select(c(module, MMpurple, padj.MMpurple)) %>%
dplyr::filter(module == "purple") %>%
mutate(moduleNum = "Module.10")
genePurple = data.frame(
moduleCol = moduleColors,
geneModuleMembership_66,
MMPadjust_66) %>%
dplyr::select(c(moduleCol, MMpurple, padj.MMpurple)) %>%
dplyr::filter(moduleCol == "purple") %>%
mutate(moduleNum = "Module.10")
genePurple
genePurple = data.frame(
moduleCol = moduleColors,
geneModuleMembership_66,
MMPadjust_66) %>%
dplyr::select(c(moduleCol, MMpurple, padj.MMpurple)) %>%
dplyr::filter(moduleCol == "purple") %>%
mutate(moduleNum = "Module.10") %>%
rownames_to_column("genes")
genesModule.10 <- left_join(annot_varroa, genePurple, by "genes")
genesModule.10 <- left_join(annot_varroa, genePurple, by = "genes")
View(genesModule.10)
genesModule.10 <- left_join(annot_varroa, genePurple, by = "genes") %>%
na.omit()
View(genesModule.10)
genesModule.10 <- left_join(annot_varroa, genePurple, by = "genes") %>%
na.omit() %>%
dplyr::select("Accession", "genes", "`Protein Name`", "moduleNum", "MMpurple", "padj.MMpurple") %>%
rename(MM = MMpurple, MMpadj = padj.MMpurple)
genesModule.10 <- left_join(annot_varroa, genePurple, by = "genes") %>%
na.omit() %>%
dplyr::select("Accession", "genes", "Protein Name", "moduleNum", "MMpurple", "padj.MMpurple") %>%
rename(MM = MMpurple, MMpadj = padj.MMpurple)
genesModule.10 <- left_join(annot_varroa, genePurple, by = "genes") %>%
na.omit() %>%
dplyr::select("Accession", "genes", "Protein Name", "moduleNum", "MMpurple", "padj.MMpurple") %>%
rename(MM = "MMpurple", MMpadj = "padj.MMpurple")
genesModule.10 <- left_join(annot_varroa, genePurple, by = "genes") %>%
na.omit() %>%
dplyr::select("Accession", "genes", "Protein Name", "moduleNum", "MMpurple", "padj.MMpurple") %>%
rename(c(MM = "MMpurple", MMpadj = "padj.MMpurple"))
genesModule.10 <- left_join(annot_varroa, genePurple, by = "genes") %>%
na.omit() %>%
dplyr::select("Accession", "genes", "Protein Name", "moduleNum", "MMpurple", "padj.MMpurple") %>%
rename(MM = "MMpurple") %>%
rename(MMpadj = "padj.MMpurple")
genesModule.10 <- left_join(annot_varroa, genePurple, by = "genes") %>%
na.omit() %>%
dplyr::select("Accession", "genes", "Protein Name", "moduleNum", "MMpurple", "padj.MMpurple") %>%
rename("MM" = "MMpurple") %>%
rename("MMpadj" = "padj.MMpurple")
left_join(annot_varroa, genePurple, by = "genes") %>%
na.omit() %>%
dplyr::select("Accession", "genes", "Protein Name", "moduleNum", "MMpurple", "padj.MMpurple") %>%
rename(MM = MMpurple)
left_join(annot_varroa, genePurple, by = "genes") %>%
na.omit() %>%
dplyr::select("Accession", "genes", "Protein Name", "moduleNum", "MMpurple", "padj.MMpurple") %>%
rename(MM = genesModule.10$MMpurple)
left_join(annot_varroa, genePurple, by = "genes") %>%
na.omit() %>%
dplyr::select("Accession", "genes", "Protein Name", "moduleNum", "MMpurple", "padj.MMpurple") %>%
rename(MM = MMpurple)
genesModule.10 <- left_join(annot_varroa, genePurple, by = "genes") %>%
na.omit() %>%
dplyr::select("Accession", "genes", "Protein Name", "moduleNum", "MMpurple", "padj.MMpurple")
genesModule.10
View(genesModule.10)
genesModule.10 <- left_join(annot_varroa, genePurple, by = "genes") %>%
na.omit() %>%
dplyr::select("genes", "moduleNum", "MMpurple", "padj.MMpurple", "Accession", "Protein Name")
left_join(annot_varroa, genePurple, by = "genes") %>%
na.omit() %>%
dplyr::select("genes", "moduleNum", "MMpurple", "padj.MMpurple", "Accession", "Protein Name") %>%
dplyr::rename(MM = MMpurple)
genesModule.10 <- left_join(annot_varroa, genePurple, by = "genes") %>%
na.omit() %>%
dplyr::select("genes", "moduleNum", "MMpurple", "padj.MMpurple", "Accession", "Protein Name") %>%
dplyr::rename(c(MM = MMpurple, MMpadj = padj.MMpurple))
allGenes <- data.frame(
module = moduleColors,
geneTraitSignificance_66,
GSPadjust_66,
geneModuleMembership_66,
MMPadjust_66,
IntraModCon = Alldegrees1_66$kWithin)
# make a table with the Trait-significance ("GS") for each gene (which is its correlation coefficient, pearson)
geneTraitSignificance_66 = as.data.frame(cor(for_modules, viruses_load_15, use = "p"));
GSPvalue_66 = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance_66), nSamples));
### Controlling the false discovery rate: Benjamini–Hochberg procedure ###
# using p.adjust function, for all comparisons, 15 modules and 15 viruses (m=225).
# first make the p-value matrix into a dataframe
GSPvalue_66_0 <- as.data.frame(GSPvalue_66)
# then "gather" all the p-values, so they will apear in one column
longer_Pvalue <- GSPvalue_66_0 %>%
rownames_to_column("module") %>%
gather("virus", "pvalue", -module)
# now calculate the p.adjust for each p-value
Padjust <- p.adjust(longer_Pvalue$pvalue, method = "fdr")
# and add the column of adjusted pvalues
Padjust <- add_column(longer_Pvalue, Padjust)
# now spread it back
GSPadjust_66 <- Padjust %>%
dplyr::select(-pvalue) %>%
group_by(virus) %>%
pivot_wider(names_from = virus, values_from = Padjust)
GSPadjust_66 <- column_to_rownames(GSPadjust_66, "module")
#rename the col names by adding the initial "GS." for genesignificance, and "p.GS." for p-value.
names(geneTraitSignificance_66) = paste("GS.", names(viruses_load_15), sep="");
names(GSPadjust_66) = paste("pdj.GS.", names(viruses_load_15), sep="");
save(geneTraitSignificance_66, GSPadjust_66, geneModuleMembership_66, MMPadjust_66, file = "/results/geneTraitANDgeneMM_66.RData")
setwd("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks") #set the directory as the local GitHub local repository
save(geneTraitSignificance_66, GSPadjust_66, geneModuleMembership_66, MMPadjust_66, file = "/results/geneTraitANDgeneMM_66.RData")
saveRDS(geneTraitSignificance_66, GSPadjust_66, geneModuleMembership_66, MMPadjust_66, file = "/results/geneTraitANDgeneMM_66.RData")
annot.vd
#load the go term enrichment analysis done using package ‘Category’
GOME_10_0 <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_term_purple.csv")
# keep only highly significant terms
GOME_10 <- GOME_10_0 %>%
filter(Pvalue < 0.00005) %>%
mutate(logPv = log(Pvalue))
#now plot it based on the count of each term and the pvalue:
GO_10 <- ggplot(GOME_10, aes(x = 0, y = Term, size = Count, color = logPv)) +
scale_color_gradient(low= "#f0e11a", high="#f70a1a") +
geom_point(alpha = 0.9) +
geom_point(shape = 1,colour = "black") +
theme_classic() +
ggtitle("GOterm enrichment analysis \n module 10") +
xlab(label = "") +
ylab(label = "GOterm") +
scale_x_discrete()
GO_10
# load the
annot.vd <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/data/VdesGOready2.csv")
#Preparing the GO frame
annot.vd2 <- annot.vd %>%
mutate(evidence = "IEA") %>%
dplyr::select(go_id = GO.ids, evidence, gene = Gene.id)
head(annot.vd2)
goFrame.vd <-GOFrame(annot.vd2, organism = "Vd")
goAllFrame.vd <-GOAllFrame(goFrame.vd)
gsc.vd <-GeneSetCollection(goAllFrame.vd, setType = GOCollection())
#Preparing the universe
universe.vd <- unique(annot.vd2$gene)
head(universe.vd)
# Preparing the gene set (list of genes in a module)
# change "black" to the name of the desired module, in the first line: [moduleColors=="black"], and in the final "write.csv(file = "GO_term_enrichment_**salmon**BP.csv")
ME <- names(for_modules)[moduleColors=="black"]
ME_df <- data.frame(gene = ME)
genes.vd <- unique(ME_df$gene)
head(genes.vd)
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
over.vd <- hyperGTest(params.vd)
over.vd
summary(over.vd)
GO_enrich.vd <- as.data.frame(summary(over.vd))
GO_enrich.vd %>%
arrange(Pvalue) %>%
#write.csv(file = "/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/results/GO_term_black.csv")
GO_enrich.vd <- as.data.frame(summary(over.vd))
# load the
annot.vd <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/data/VdesGOready2.csv")
#Preparing the GO frame
annot.vd2 <- annot.vd %>%
mutate(evidence = "IEA") %>%
dplyr::select(go_id = GO.ids, evidence, gene = Gene.id)
head(annot.vd2)
goFrame.vd <-GOFrame(annot.vd2, organism = "Vd")
goAllFrame.vd <-GOAllFrame(goFrame.vd)
gsc.vd <-GeneSetCollection(goAllFrame.vd, setType = GOCollection())
#Preparing the universe
universe.vd <- unique(annot.vd2$gene)
head(universe.vd)
# Preparing the gene set (list of genes in a module)
# change "black" to the name of the desired module, in the first line: [moduleColors=="black"], and in the final "write.csv(file = "GO_term_enrichment_**salmon**BP.csv")
ME <- names(for_modules)[moduleColors=="black"]
ME
ME_df <- data.frame(gene = ME)
ME_df
genes.vd <- unique(ME_df$gene)
head(genes.vd)
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
gsc.vd
genes.vd
universe.vd
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
