stats <- grobTree(textGrob("N = 20\nPadjust = 0.02", x=0.5,  y=0.9, hjust=0,
gp=gpar(col="black", fontsize=20
ble <- filter(dat_virus, Gene == "VDV2" & Experiment == "CuP8_exp")
# Add stats
stats <- grobTree(textGrob("N = 20\nPadjust = 0.02", x=0.5,  y=0.9, hjust=0,
gp=gpar(col="black", fontsize=20
ble <- filter(dat_virus, Gene == "VDV2" & Experiment == "CuP8_exp")
# Add stats
stats <- grobTree(textGrob("N = 20\nPadjust = 0.02", x=0.5,  y=0.9, hjust=0,
gp=gpar(col="black", fontsize=20
# for VDV2 in CuP8 silenced mites:
table <- filter(dat_virus, Gene == "VDV2" & Experiment == "CuP8_exp")
# Add stats
stats <- grobTree(textGrob("N = 20\nPadjust = 0.02", x=0.5,  y=0.9, hjust=0,
gp=gpar(col="black", fontsize=20)))
# Plot
VDV2_CuP8 <- ggboxplot(table, x = "Treatment", y = "RQ",
main = "VDV2 load in CuP8-silenced mites",
color = "Treatment",
palette = c("#00AFBB", "#E7B800"),
order = c("Control", "Silenced"),
ylab = "Relative viral load", xlab = "Treatment")  +
theme(legend.position = "none", text = element_text(size=20)) +
annotation_custom(stats)
# for ARV2 in CuP8 silenced mites:
table <- filter(dat_virus, Gene == "ARV2" & Experiment == "CuP8_exp")
# Add stats
stats <- grobTree(textGrob("N = 20\nPadjust = 0.02", x=0.5,  y=0.9, hjust=0,
gp=gpar(col="black", fontsize=20)))
# Plot
ARV2_CuP8 <- ggboxplot(table, x = "Treatment", y = "RQ",
main = "ARV2 load in CuP8-silenced mites",
color = "Treatment",
palette = c("#00AFBB", "#E7B800"),
order = c("Control", "Silenced"),
ylab = "Relative viral load", xlab = "Treatment")  +
theme(legend.position = "none", text = element_text(size=20)) +
annotation_custom(stats)
# for DWVa in CuP8 silenced mites:
table <- filter(dat_virus, Gene == "DWVa" & Experiment == "CuP8_exp")
# Add stats
stats <- grobTree(textGrob("N = 20\nPadjust = 0.2", x=0.5,  y=0.8, hjust=0,
gp=gpar(col="black", fontsize=20)))
# Plot
DWVa_CuP8 <- ggboxplot(table, x = "Treatment", y = "RQ",
main = "DWVa load in CuP8-silenced mites",
color = "Treatment",
palette = c("#00AFBB", "#E7B800"),
order = c("Control", "Silenced"),
ylab = "Relative viral load", xlab = "Treatment")  +
theme(legend.position = "none", text = element_text(size=20)) +
annotation_custom(stats)
VDV2_CuP8
CuP8
# for CuP8:
table <- filter(dat_gene, Gene == "CuP8")
# Add stats
stats <- grobTree(textGrob("N = 22\nPadjust < 0.0001", x=0.5,  y=0.9, hjust=0,
gp=gpar(col="black", fontsize=20)))
# Plot
CuP8 <- ggboxplot(table, x = "Treatment", y = "RQ",
main = "CuP8 expression",
color = "Treatment", palette = c("#00AFBB", "#E7B800"),
order = c("Control", "Silenced"),
ylab = "Relative expression", xlab = "Treatment")  +
theme(legend.position = "none", text = element_text(size=20)) +
annotation_custom(stats)
CuP8
ARV2_CuP8
DWVa_CuP8
library("dplyr")
library("tidyverse")
library("vegan")
library("DESeq2")
library("ggfortify")
library("WGCNA")
library("rmarkdown")
library("knitr") # for the markdown
library("kableExtra") # for creating a scrolling table
library("ggplot2") # for plotting
library("ape") # for reading the phylogenetic tree and for mantel.test
library("Biostrings")
library("ggtree") # for plotting the tree
library("ggrepel") # for spreading text labels on the plot
library("scales") # for axis labels notation
library("GO.db")
library("reshape2")
library("RSQLite")
library("AnnotationDbi")
library("GSEABase")
library("GOstats")
library("maps") # for the map background
library("leaflet") #for the interactive maps
library("htmltools")
library("rgdal")
library("grid")
library("gridExtra")
library("GeneOverlap")
library("cluster")
library("rmdformats")
library("corrplot")
library("viridis")
library("hrbrthemes")
library("ggthemes")
library("RColorBrewer")
library("naniar")
knitr::opts_chunk$set(echo = TRUE)
df <- readRDS("/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/data/kallisto.rds")
viruses_load <- readRDS(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/viruses_load.RData")
# (1) virus abundance plot
joined_virus_lib <- viruses_load %>% gather("library", "tpm", -description)
ggplot(joined_virus_lib, aes(x= library, y = tpm, fill = description)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90))
# (2) plot a PCA of viruses abundance
joined_virus_lib_PCA <- joined_virus_lib %>% group_by(description, library) %>% summarise(tpm = sum(tpm)) %>% spread(description, tpm) %>% dplyr::select(-library)
virus_PCA <- princomp(joined_virus_lib_PCA)
biplot(virus_PCA)
for_modules
#transpose final_gene_tpm, and transform
gene_tpm_T <- gene_tpm %>%
dplyr::select(-"gene_id") %>%
column_to_rownames("target_id") %>%
transposeBigData()
#transpose final_gene_tpm, and transform (log10+0.000001)
final_gene_tpm_T<- transposeBigData(log10(final_gene_tpm + 0.000001))
#load data:
load("/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/gene_tpm.RData")
#transpose final_gene_tpm, and transform (log10+0.000001)
final_gene_tpm_T<- transposeBigData(log10(final_gene_tpm + 0.000001))
#plot PCA, detect outlier libraries
autoplot(prcomp(final_gene_tpm_T), label = TRUE)+
ggtitle("66 libraries")
#plot PCA, detect outlier libraries
autoplot(prcomp(final_gene_tpm_T), label = TRUE)+
ggtitle("PCA of 66 libraries based on gene expression and viral load")
View(viruses_load)
library("dplyr")
library("tidyverse")
library("vegan")
library("DESeq2")
library("ggfortify")
library("WGCNA")
library("rmarkdown")
library("knitr") # for the markdown
library("kableExtra") # for creating a scrolling table
library("ggplot2") # for plotting
library("ape") # for reading the phylogenetic tree and for mantel.test
library("Biostrings")
library("ggtree") # for plotting the tree
library("ggrepel") # for spreading text labels on the plot
library("scales") # for axis labels notation
library("GO.db")
library("reshape2")
library("RSQLite")
library("AnnotationDbi")
library("GSEABase")
library("GOstats")
library("maps") # for the map background
library("leaflet") #for the interactive maps
library("htmltools")
library("rgdal")
library("grid")
library("gridExtra")
library("GeneOverlap")
library("cluster")
library("rmdformats")
library("corrplot")
library("viridis")
library("hrbrthemes")
library("ggthemes")
library("RColorBrewer")
library("naniar")
knitr::opts_chunk$set(echo = TRUE)
viruses_load <- readRDS(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/viruses_load.RData")
# prepare the 'viruses_load' table, with 15 viruses,
# excluding viruses with 'zero tpm': "CBPV", "AFV", "ANV" , "VPVL_46", "VPVL_36", "SBPV", also excluding viruses with low abundance :"KBV", "LSV".  left with 15 viruses
a_viruses_load_66 <- viruses_load %>%
filter(description %in% c("DWVa", "ARV_2","VOV_1", "BMV","AmFV","ABPV","VTLV","IAPV","SV","VDV1/DWVb","DWVc","BQCV","VDV3","VDV2","VDV4")) %>%
column_to_rownames("description") %>%
transposeBigData() %>%
rownames_to_column("library") %>%
#identify and remove the row numbers of the outlierd libraries (found by PCA)
#filter(!(library %in% c("SRR5109825", "SRR5109827", "SRR533974" , "SRR3927496", "SRR8867385"))) %>%
column_to_rownames("library")
# correlate viruses load (66 libs)
corrplot2 <- function(data,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 90,
number.font = 1,
number.cex = 0.5,
mar = c(0, 0, 0, 0)) {
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#053061","#2166ac","#4393c3","#92c5de","#d1e5f0","#f7f7f7","#fddbc7","#f4a582","#d6604d","#b2182b","#67001f"))
corrplot(mat,
method = "color", col = col(200), number.font = number.font,
mar = mar, number.cex = number.cex,
type = type, order = order,
tl.col = "black", tl.srt = tl.srt, # rotation of text labels
# combine with significance level
p.mat = p.mat, sig.level = sig.level, insig = "blank",
# hide correlation coefficients on the diagonal
diag = diag
)
}
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
sig.level = 0.05,
order = "original",
diag = T,
type = "full",
tl.srt = 45
)
# correlogram without viruses names:
corrplot2 <- function(data,
method = "pearson",
order = "original",
diag = FALSE,
type = "upper",
tl.srt = 90,
mar = c(0, 0, 0, 0)) {
data_incomplete <- data
data <- data[complete.cases(data), ]
mat <- cor(data, method = method)
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
p.mat <- cor.mtest(data, method = method)
col <- colorRampPalette(c("#053061","#2166ac","#4393c3","#92c5de","#d1e5f0","#f7f7f7","#fddbc7","#f4a582","#d6604d","#b2182b","#67001f"))
corrplot(mat,
method = "color", col = col(200),
mar = mar,
type = type, order = order,
tl.col = "black",
# hide correlation coefficients on the diagonal
diag = diag
)
}
virusAbundCor_66 <- corrplot2(
data = a_viruses_load_66,
method = "pearson",
order = "original",
diag = T,
tl.srt = 45,
type = "upper")
library("dplyr")
library("tidyverse")
library("vegan")
library("DESeq2")
library("ggfortify")
library("WGCNA")
library("rmarkdown")
library("knitr") # for the markdown
library("kableExtra") # for creating a scrolling table
library("ggplot2") # for plotting
library("ape") # for reading the phylogenetic tree and for mantel.test
library("Biostrings")
library("ggtree") # for plotting the tree
library("ggrepel") # for spreading text labels on the plot
library("scales") # for axis labels notation
library("GO.db")
library("reshape2")
library("RSQLite")
library("AnnotationDbi")
library("GSEABase")
library("GOstats")
library("maps") # for the map background
library("leaflet") #for the interactive maps
library("htmltools")
library("rgdal")
library("grid")
library("gridExtra")
library("GeneOverlap")
library("cluster")
library("ggpubr")
library("GGally")
#if you are starting from here,
# Load the expression and trait data saved in the first part
lnames <- load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/varroa_virus-01-dataInput.RData");
#The variable lnames contains the names of loaded variables.
lnames
# Load network data saved in the second part.
lnames = load(file = "/Users/nuriteliash/OneDrive - OIST/Repos/varroa-virus-networks-Local/results/Varroa_modules_networkConstruction-auto.RData");
lnames
MEs
# Recalculate MEs with color labels
MEs0 = moduleEigengenes(for_modules, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
MEs
moduleEigengenes
library(dplyr)
library(tidyverse)
library(vegan)
library(DESeq2)
library(ggfortify)
library(WGCNA)
library(rmarkdown)
library("knitr") # for the markdown
library("kableExtra") # for creating a scrolling table
library("ggplot2") # for plotting
library("ape") # for reading the phylogenetic tree and for mantel.test
library("Biostrings")
library("ggtree") # for plotting the tree
library("ggrepel") # for spreading text labels on the plot
library("scales") # for axis labels notation
library("GO.db")
library("reshape2")
library("RSQLite")
library("AnnotationDbi")
library("GSEABase")
library("GOstats")
library("maps") # for the map background
library("leaflet") #for the interactive maps
library("htmltools")
library("rgdal")
library("grid")
library("gridExtra")
library("GeneOverlap")
library(cluster)
# change "cyan" to the name of the desired module, in the first line: [moduleColors=="cyan"], and in the final "write.csv(file = "GO_term_enrichment_**cyan**BP.csv")
ME <- names(for_modules)[moduleColors=="salmon"]
ME_df <- data.frame(geneno = ME,Gene.id = ME)
ME_df$Gene.id <- paste("LOC", ME_df$Gene.id, sep="")
ME
genes.vd <- as.integer(unique(ME_df$geneno))
head(genes.vd)
geneno
ME_df
geneno
genes.vd
head(genes.vd)
genes.vd
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
over.vd <- hyperGTest(params.vd)
gsc.vd
#Preparing the GO frame
annot.vd <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/data/VdesGOready2.csv")
annot.vd2 <- annot.vd %>%
mutate(evidence = "IEA") %>%
dplyr::select(go_id = GO.ids, evidence, gene = Gene.id)
head(annot.vd2)
goFrame.vd <-GOFrame(annot.vd2, organism = "Vd")
goAllFrame.vd <-GOAllFrame(goFrame.vd)
gsc.vd <-GeneSetCollection(goAllFrame.vd, setType = GOCollection())
universe.vd <- unique(annot.vd2$gene)
head(universe.vd)
# change "cyan" to the name of the desired module, in the first line: [moduleColors=="cyan"], and in the final "write.csv(file = "GO_term_enrichment_**cyan**BP.csv")
ME <- names(for_modules)[moduleColors=="salmon"]
ME_df <- data.frame(geneno = ME,Gene.id = ME)
ME_df$Gene.id <- paste("LOC", ME_df$Gene.id, sep="")
genes.vd <- as.integer(unique(ME_df$geneno))
head(genes.vd)
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
over.vd <- hyperGTest(params.vd)
geneIds
#Preparing the GO frame
annot.vd <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/data/VdesGOready2.csv")
annot.vd2 <- annot.vd %>%
mutate(evidence = "IEA") %>%
dplyr::select(go_id = GO.ids, evidence, gene = Gene.id)
#Preparing the GO frame
annot.vd <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/data/VdesGOready2.csv")
annot.vd2 <- annot.vd %>%
mutate(evidence = "IEA") %>%
dplyr::select(go_id = GO.ids, evidence, gene = Gene.id)
head(annot.vd2)
goFrame.vd <-GOFrame(annot.vd2, organism = "Vd")
goAllFrame.vd <-GOAllFrame(goFrame.vd)
gsc.vd <-GeneSetCollection(goAllFrame.vd, setType = GOCollection())
universe.vd <- unique(annot.vd2$gene)
head(universe.vd)
# change "cyan" to the name of the desired module, in the first line: [moduleColors=="cyan"], and in the final "write.csv(file = "GO_term_enrichment_**cyan**BP.csv")
ME <- names(for_modules)[moduleColors=="salmon"]
ME_df <- data.frame(geneno = ME,Gene.id = ME)
ME_df$Gene.id <- paste("LOC", ME_df$Gene.id, sep="")
genes.vd <- as.integer(unique(ME_df$geneno))
head(genes.vd)
params.vd <- GSEAGOHyperGParams(name = "Vd_GO_enrichment",
geneSetCollection = gsc.vd,
geneIds = genes.vd,
universeGeneIds = universe.vd,
ontology = "BP", # change with MF, CC to test all
pvalueCutoff = 0.05,
conditional = F,
testDirection = "over")
library("dplyr")
library("tidyverse")
library("vegan")
library("DESeq2")
library("ggfortify")
library("WGCNA")
library("rmarkdown")
library("knitr") # for the markdown
library("kableExtra") # for creating a scrolling table
library("ggplot2") # for plotting
library("ape") # for reading the phylogenetic tree and for mantel.test
library("Biostrings")
library("ggtree") # for plotting the tree
library("ggrepel") # for spreading text labels on the plot
library("scales") # for axis labels notation
library("GO.db")
library("reshape2")
library("RSQLite")
library("AnnotationDbi")
library("GSEABase")
library("GOstats")
library("maps") # for the map background
library("leaflet") #for the interactive maps
library("htmltools")
library("rgdal")
library("grid")
library("gridExtra")
library("GeneOverlap")
library("cluster")
library("dplyr")
library("tidyverse")
library("vegan")
library("DESeq2")
library("ggfortify")
library("WGCNA")
library("rmarkdown")
library("knitr") # for the markdown
library("kableExtra") # for creating a scrolling table
library("ggplot2") # for plotting
library("ape") # for reading the phylogenetic tree and for mantel.test
library("Biostrings")
library("ggtree") # for plotting the tree
library("ggrepel") # for spreading text labels on the plot
library("scales") # for axis labels notation
library("GO.db")
library("reshape2")
library("RSQLite")
library("AnnotationDbi")
library("GSEABase")
library("GOstats")
library("maps") # for the map background
library("leaflet") #for the interactive maps
library("htmltools")
library("rgdal")
library("grid")
library("gridExtra")
library("GeneOverlap")
library("cluster")
#the working directory is in GitHb:
setwd("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks")
#Preparing the GO frame
annot.vd <- read.csv("/Users/nuriteliash/Documents/GitHub/varroa-virus-networks/data/VdesGOready2.csv")
annot.vd2 <- annot.vd %>%
mutate(evidence = "IEA") %>%
dplyr::select(go_id = GO.ids, evidence, gene = Gene.id)
head(annot.vd2)
annot.vd2
goFrame.vd <-GOFrame(annot.vd2, organism = "Vd")
goFrame.vd
# the following function GOAllFrame() give warnings. and the output is of less genes...
goAllFrame.vd <-GOAllFrame(goFrame.vd)
warnings()
dbDisconnect()
install.packages(c("data.table", "WGCNA"))
